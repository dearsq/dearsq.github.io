<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iyounix.com/"/>
  <updated>2018-10-21T02:08:51.713Z</updated>
  <id>http://iyounix.com/</id>
  
  <author>
    <name>Younix</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组件_Service.md</title>
    <link href="http://iyounix.com/2018/11/08/Android_App/%E7%BB%84%E4%BB%B6_Service/"/>
    <id>http://iyounix.com/2018/11/08/Android_App/组件_Service/</id>
    <published>2018-11-08T03:20:49.990Z</published>
    <updated>2018-10-21T02:08:51.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Service 是 Android 中实现程序后台运行的解决方案,<br>适合执行那些不需要和用户交互而且还要求长期运行的任务.</p><p><img src="https://ws1.sinaimg.cn/large/ba061518gy1fui895t2mjj20mq0bpwg4.jpg" alt=""></p><h3 id="4个手动调用的方法"><a href="#4个手动调用的方法" class="headerlink" title="4个手动调用的方法"></a>4个手动调用的方法</h3><p>startService()    启动服务, 手动调用 startService() 后，自动调用内部方法：onCreate()、onStartCommand().<br>stopService()    关闭服务, 手动调用 stopService() 后，自动调用内部方法：onDestory(). 但是如果没有解绑, 是无法停止服务的<br>bindService()    绑定服务, 手动调用 bindService()后，自动调用内部方法：onCreate()、onBind().<br>unbindService()    解绑服务, 手动调用 unbindService()后，自动调用内部方法：onCreate()、onBind()、onDestory()</p><h3 id="内部自动调用的方法"><a href="#内部自动调用的方法" class="headerlink" title="内部自动调用的方法"></a>内部自动调用的方法</h3><p>onCreat()    创建服务<br>onStartCommand()    开始服务<br>onDestroy()    销毁服务<br>onBind()    绑定服务<br>onUnbind()    解绑服务</p><h3 id="重要知识点"><a href="#重要知识点" class="headerlink" title="重要知识点"></a>重要知识点</h3><p>startService()和 stopService()只能开启和关闭Service，无法操作Service；<br>bindService()和 unbindService()可以操作 Service</p><p>startService() 开启的Service，调用者退出后Service仍然存在；<br>BindService() 开启的Service，调用者退出后，Service随着调用者销毁。</p><h2 id="只使用-startService-启动服务的生命周期"><a href="#只使用-startService-启动服务的生命周期" class="headerlink" title="只使用 startService 启动服务的生命周期"></a>只使用 startService 启动服务的生命周期</h2><p>手动 startService()<br>onCreate()<br>onStartCommand()<br>手动 stopService()<br>onDestory()</p><h2 id="只使用-bindService-绑定服务的生命周期"><a href="#只使用-bindService-绑定服务的生命周期" class="headerlink" title="只使用 bindService 绑定服务的生命周期"></a>只使用 bindService 绑定服务的生命周期</h2><p>手动 bindService()<br>onCreate()<br>onBind()<br>手动 unBindService()<br>onUnbind()<br>onDestory()</p><h2 id="同时使用-startService-BindService-服务的生命周期"><a href="#同时使用-startService-BindService-服务的生命周期" class="headerlink" title="同时使用 startService BindService 服务的生命周期"></a>同时使用 startService BindService 服务的生命周期</h2><p>手动 startService()<br>onCreate()<br>onStartCommand()<br>手动 BindService()<br>onBind()<br>手动 unBindService()<br>onUnbind()<br>手动 StopService()<br>onDestory()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;Service 是 Android 中实现程序后台运行的解决方案,&lt;br&gt;适合执行那些不需要和用户交互而且还要求长期运行的任
      
    
    </summary>
    
    
      <category term="android" scheme="http://iyounix.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android6.0 RK3399 Mipi LCD RM72014 移植调试流程</title>
    <link href="http://iyounix.com/2018/11/08/Android_Driver/Driver/%5BAndroid6.0%5D%5BRK3399%5D%20Mipi%20LCD%20RM72014%20%E7%A7%BB%E6%A4%8D%E8%B0%83%E8%AF%95%E6%B5%81%E7%A8%8B/"/>
    <id>http://iyounix.com/2018/11/08/Android_Driver/Driver/[Android6.0][RK3399] Mipi LCD RM72014 移植调试流程/</id>
    <published>2018-11-08T02:37:43.263Z</published>
    <updated>2018-11-08T02:37:43.263Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实之前有写过一篇关于 =<a href="http://blog.csdn.net/dearsq/article/details/52354593" target="_blank" rel="noopener">RK3288 平台 LCD 调试</a>流程的博客 。不过是 RK3288 Android5.1 平台的。<br>虽然实际上 Mipi 部分代码实在是大同小异。但是距上次那篇文章到现在也已经不知不觉整整一年了，这一年 Mipi LCD 确实也调了不少。<br>索性再次重新梳理一下，也许会有别样的收获吧。<br>没有看过那篇文章的同学也不需要再看了，这篇文章会更加全面的描述和分析调试流程。<br>这次文章以 RM72014 这颗 Driver IC 为例，从 RK Mipi LCD 代码分析 到 屏的公式计算 再到实践中的问题都会涉及，<strong>调试为主，分析为辅</strong>，比较冗长，大家可以挑选自己需要的部分来看。<br>随着我碰到的情况更多，本文也将不断更新。<br>也欢迎大家留言分享交流自己碰到的情况和解决方案。</p><p>本文地址：<a href="http://blog.csdn.net/dearsq/article/details/77341120" target="_blank" rel="noopener">http://blog.csdn.net/dearsq/article/details/77341120</a><br>作者 Younix，欢迎转载，转载请著名出处，谢谢。</p><h2 id="一、扣出屏-datasheet-中的关键信息"><a href="#一、扣出屏-datasheet-中的关键信息" class="headerlink" title="一、扣出屏 datasheet 中的关键信息"></a>一、扣出屏 datasheet 中的关键信息</h2><p>首先我们要找屏厂索取详细版的屏的规格书，扣出其中的关键信息。<br>屏 Spec 的目录大概如下：</p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimsb8phzuj20ja0ip0v3.jpg" alt=""></p><p>其中我们最需要关注的是<br><strong>General Specification</strong><br><strong>Power on/off sequence</strong> 上电下电时序<br><strong>Timing</strong> 屏参</p><h3 id="1-General-Specification"><a href="#1-General-Specification" class="headerlink" title="1. General Specification"></a>1. General Specification</h3><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimsg46oifj20je0mgtb4.jpg" alt=""></p><p>提炼出来关键信息是<br>Hactive  = 800 ，水平分辨率<br>Vactive = 1280 ，垂直分辨率<br>Lanes = 4 ，Mipi data 信号线通道数</p><h3 id="2-Power-on-off-sequence"><a href="#2-Power-on-off-sequence" class="headerlink" title="2. Power on/off sequence"></a>2. Power on/off sequence</h3><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimsjacg20j20jk0h70u5.jpg" alt=""></p><p>这个在屏点不亮的时候需要首先确认，这个我们后面会说。<br>我们在调屏的时候可以先把这个截图保存到自己的笔记中，就不需要每次都去翻 datasheet 了。</p><h3 id="3-Timing"><a href="#3-Timing" class="headerlink" title="3. Timing"></a>3. Timing</h3><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimskfj44mj20hp0cm799.jpg" alt=""></p><p>关键信息提炼出来：<br>Hactive = 800<br>HFP = 24<br>HBP = 132<br>Hsync = 4</p><p>Vactive = 1280<br>VFP = 8<br>VBP = 8<br>VSync = 4</p><p>Pixel Clock Frequency（Pclk）= 74.88MHZ</p><p>这里我们详细说一下各个参数的含义，这个对我们后续调屏会非常有帮助。<br>更加详细全面的参见 NXP 的一份资料：<a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwjZl_bg3enVAhWEabwKHRZQBXoQFgglMAA&amp;url=http://www.nxp.com/wcm_documents/techzones/microcontrollers-techzone/Presentations/graphics.lcd.technologies.pdf&amp;usg=AFQjCNGFGpzekTWXPggcjcWrWuLUDcdKGQ" target="_blank" rel="noopener">graphics.lcd.technologies.pdf</a></p><p>说白了核心思想就是下面这张图：</p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimt123xehj20s10ggjrn.jpg" alt=""></p><p>Horizontal 代表水平方向，HBP 行同步信号后肩 、HFP 行同步信号前肩，单位是 clocks，什么 clock ？pclk （pixel clock frequence），像素时钟频率，也就是我们在 dts 中填充的 clock-frequence 这个参数。<br>Vertical 代表垂直方向，VBP 帧同步信号后肩、VFPP 帧同步信号前肩，单位是 lines。</p><p>另外根据以上的信息，我们还能计算出 Mipi Dsi Clock 。<br><strong>DCLK</strong>  = 100 + H_total×V_total × fps × 3 × 8 / lanes_nums<br><strong>total</strong> 这里指的是 sync + front + back + active<br>比如 H_total = Hsync + HFP(hfront-proch)  + HBP(hback-porch) + Hactive<br><strong>fps</strong> 指的是帧率，一般我们按照 60 帧来计算<br><strong>3 × 8</strong> 代表一个 RGB 为 3 个字节，每个字节 8 bit<br><strong>lanes</strong> 代表 mipi data 通道数</p><p>所以对于我这个屏<br>DCLK<br>= 100Mbps + H_Total × V_Total x fps x 3 x 8 / lanes_nums<br>= 100 + ( 800 + 21 + 132 + 4 ) x ( 1280 + 8 + 8 + 4 ) x 60 帧 x 3 字节 x 8 bit / 4 lanes<br>= 100Mbps + 449Mbps = 549 Mbps</p><h2 id="二、根据屏参-和-硬件设计填写-dts"><a href="#二、根据屏参-和-硬件设计填写-dts" class="headerlink" title="二、根据屏参 和 硬件设计填写 dts"></a>二、根据屏参 和 硬件设计填写 dts</h2><p>RK LCD 这部分的去耦合性已经做的很好了。<br>我们仅仅只需要填写 dts ，驱动会自动解析 dts ，<br>管脚控制部分会自动申请分配操纵 GPIO，屏初始化代码（init cmds）和屏参（timing）将被自动封装成 mipi dsi 命令进行发送。</p><h3 id="2-1-创建屏的-dtsi-文件"><a href="#2-1-创建屏的-dtsi-文件" class="headerlink" title="2.1 创建屏的 dtsi 文件"></a>2.1 创建屏的 dtsi 文件</h3><p>仿造平台的其他 lcd-*-mipi.dtsi 编写 lcd-xxx-mipi.dtsi 后 需要在 主 dts 文件中包含这个 dtsi。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;rk_screen &#123;</span><br><span class="line">  /* 8inch LCD Mipi */</span><br><span class="line">  #include &lt;dt-bindings/display/screen-timing/lcd-mipi-rm72014.dtsi&gt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>根据前面我们获取到的屏参信息开始编写 dtsi</p><h4 id="2-1-1-Mipi-Host"><a href="#2-1-1-Mipi-Host" class="headerlink" title="2.1.1 Mipi Host"></a>2.1.1 Mipi Host</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//MIPI Host配置</span><br><span class="line">disp_mipi_init: mipi_dsi_init&#123;</span><br><span class="line">        compatible = &quot;rockchip,mipi_dsi_init&quot;;</span><br><span class="line"></span><br><span class="line">        /* 是否要在 dtsi 中初始化 1 是 0 否 */</span><br><span class="line">        rockchip,screen_init    = &lt;1&gt;;</span><br><span class="line"></span><br><span class="line">        /* 要几条数据 lane*/</span><br><span class="line">        rockchip,dsi_lane       = &lt;4&gt;;</span><br><span class="line"></span><br><span class="line">        /* ddr clk 一条 lane 的传输速率 Mbits/s */</span><br><span class="line">/* 前面我们已经算得为 549 */</span><br><span class="line">        rockchip,dsi_hs_clk     = &lt;549&gt;;</span><br><span class="line"></span><br><span class="line">        /* 单mipi 还是双 mipi*/</span><br><span class="line">        rockchip,mipi_dsi_num   = &lt;1&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-Timing"><a href="#2-1-2-Timing" class="headerlink" title="2.1.2 Timing"></a>2.1.2 Timing</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">disp_timings: display-timings &#123;</span><br><span class="line">        native-mode = &lt;&amp;timing0&gt;;</span><br><span class="line">        compatible = &quot;rockchip,display-timings&quot;;</span><br><span class="line">        timing0: timing0 &#123;</span><br><span class="line">            screen-type = &lt;SCREEN_MIPI&gt;;     //单mipi SCREEN_MIPI 双mipi SCREEN_DUAL_MIPI</span><br><span class="line">            lvds-format = &lt;LVDS_8BIT_2&gt;;     //不用配置</span><br><span class="line">            out-face    = &lt;OUT_P888&gt;;        //屏的接线格式 </span><br><span class="line">             //配置颜色，可为OUT_P888（24位）、OUT_P666（18位）或者OUT_P565（16位）</span><br><span class="line">            clock-frequency = &lt;74488000&gt;;   //dclk频率，看规格书，或者 H×V×fps</span><br><span class="line">            hactive = &lt;800&gt;;                 //水平有效像素</span><br><span class="line">            vactive = &lt;1280&gt;;                //垂直有效像素</span><br><span class="line">            hback-porch = &lt;132&gt;;              //水平同步信号 后肩</span><br><span class="line">            hfront-porch = &lt;24&gt;;              //水平同步信号 前肩</span><br><span class="line">            vback-porch = &lt;8&gt;;</span><br><span class="line">            vfront-porch = &lt;8&gt;;            </span><br><span class="line">            hsync-len = &lt;4&gt;;                //水平同步信号</span><br><span class="line">            vsync-len = &lt;4&gt;;</span><br><span class="line">            hsync-active = &lt;0&gt;;              //hync 极性控制 置 1 反转极性</span><br><span class="line">            vsync-active = &lt;0&gt;;</span><br><span class="line">            de-active = &lt;0&gt;;                 //DEN 极性控制</span><br><span class="line">            pixelclk-active = &lt;0&gt;;           //dclk 极性控制</span><br><span class="line">            swap-rb = &lt;0&gt;;                   //设 1 反转颜色 red 和 blue</span><br><span class="line">            swap-rg = &lt;0&gt;;</span><br><span class="line">            swap-gb = &lt;0&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-init-cmds"><a href="#2-1-3-init-cmds" class="headerlink" title="2.1.3 init cmds"></a>2.1.3 init cmds</h4><p>屏场给的初始化时序往往不会是 RK 平台的。我们可能需要自己转换一下。<br>不过一般也很好理解，我们分别分析两组平台的例子：</p><h5 id="展讯平台："><a href="#展讯平台：" class="headerlink" title="展讯平台："></a><strong>展讯平台</strong>：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0x53);SPI_WriteData(0x24);</span><br><span class="line">GP_COMMAD_PA(03);SPI_WriteData(0xf0);SPI_WriteData(0x5a);SPI_WriteData(0x5a); Delay_ms(30);</span><br><span class="line">GP_COMMAD_PA(01);SPI_WriteData(0x11); Delay_ms(100);</span><br><span class="line">GP_COMMAD_PA(01);SPI_WriteData(0x29); Delay_ms(30);</span><br><span class="line">GP_COMMAD_PA(04);SPI_WriteData(0xc3);SPI_WriteData(0x40);SPI_WriteData(0x00);SPI_WriteData(0x28);</span><br><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0x50);SPI_WriteData(0x77);</span><br><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0xe1);SPI_WriteData(0x66);</span><br><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0xdc);SPI_WriteData(0x67);</span><br><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0xd3);SPI_WriteData(0xc8);</span><br><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0x50);SPI_WriteData(0x00);</span><br><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0xf0);SPI_WriteData(0x5a);</span><br><span class="line">GP_COMMAD_PA(02);SPI_WriteData(0xf5);SPI_WriteData(0x80);</span><br><span class="line">Delay(120);</span><br></pre></td></tr></table></figure><p>GP_COMMAD_PA 表示 dsi packets 的个数<br>SPI_WriteData 接口用来写数据<br>Delay_ms 表示延时 xx 毫秒<br>所以<br><code>GP_COMMAD_PA(02);SPI_WriteData(0x53);SPI_WriteData(0x24);</code><br>表示给屏 0x53 指令，有<strong>一个</strong>指令参数，为 0x24<br><code>GP_COMMAD_PA(03);SPI_WriteData(0xf0);SPI_WriteData(0x5a);SPI_WriteData(0x5a); Delay_ms(30);</code><br>表示给屏 0xf0 指令，有<strong>两个</strong>指令参数 0x5a 和 0x5a ，并且延时 30ms<br><code>GP_COMMAD_PA(01);SPI_WriteData(0x11); Delay_ms(100);</code><br>表示给屏 0x11 指令，<strong>没有</strong>指令参数，并且延时 100ms<br><code>GP_COMMAD_PA(01);SPI_WriteData(0x29); Delay_ms(30);</code><br>表示给屏 0x29 指令，<strong>没有</strong>指令参数，并且延时 30ms</p><p>后面同理。</p><p>细心的同学发现了我这里强调了指令参数的个数。<br>因为这涉及到了 dsi 协议中 dsi 传输的数据类型。<br>根据 《MIPI-DSI-specification-v1-1.pdf》49 页我们可以看到，有如下这些数据类型。</p><p>我们只需要关注 0x05 ，0x15，0x39，他们分别对应的 dsi 参数类型是 无参指令（Short No parameters）、单参数指令（Short 1 parameter）、多参数指令（Long Command Packets）。</p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimx9n2o10j20jh0lj40y.jpg" alt=""></p><h5 id="MTK-平台"><a href="#MTK-平台" class="headerlink" title="MTK 平台"></a><strong>MTK 平台</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_array[0]=0x00043902;</span><br><span class="line">data_array[1]=0x8983FFB9; </span><br><span class="line">dsi_set_cmdq(&amp;data_array, 2, 1); </span><br><span class="line">MDELAY(10);</span><br></pre></td></tr></table></figure><p>分析得知<br>array[0] 中 04 代表要传输的字节数，3902 代表传输的是多参指令<br>//MTK平台 3900 代表无参 3905 表示单参 3902 表示多参<br>array<a href="http://blog.csdn.net/dearsq/article/details/52354593" target="_blank" rel="noopener">1</a> 中的参数全部为传输的参数，而且正确的传参数据是倒着的 B9 FF 83 89<br>所以移植到 RK 平台应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rockchip,on-cmds1 &#123;</span><br><span class="line">                            compatible = &quot;rockchip,on-cmds&quot;;</span><br><span class="line">                            rockchip,cmd_type = &lt;LPDT&gt;;</span><br><span class="line">                            rockchip,dsi_id = &lt;0&gt;;</span><br><span class="line">                            rockchip,cmd = &lt;0x39 0xB9 0xFF 0x83 0x89&gt;;</span><br><span class="line">                            //0x39 为 DSI 数据类型、  0xB9 为LCD 命令、后面为参数</span><br><span class="line">                            rockchip,cmd_delay = &lt;10&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Mipi-DSI-协议中-Generic-和-DCS-的区别"><a href="#Mipi-DSI-协议中-Generic-和-DCS-的区别" class="headerlink" title=" Mipi DSI 协议中 Generic 和 DCS 的区别"></a><strong> Mipi DSI 协议中 Generic 和 DCS 的区别</strong></h5><p>另外，值得一提的是。在上面 Mipi 的 Spec 中，大家可以看到 0x29 和 0x39 都可以表示多参，0x03 和 0x05 都可以表示无参，0x13 和 0x15 都可以表示单参。但他们不是没有区别的。</p><p><strong>DSI 协议中 ，0x29 和 0x39 区别</strong>：在 Mipi 协议中，它俩都表示 长包（Long Packet）数据类型。<br>但是 Mipi DSI 的 Spec 中写着两者的区别 0x29 属于 Generic long write ，0x39 属于 DCS long write。<br><strong>DCS 系</strong>的读写命令，可带参数，常用于 LCD 初始化参数命令。<br><strong>Generic 系</strong>读写命令，是协议规范外的命令，通常是一些 IC 定制的，只要确保主机和外设同意这些数据格式即可，通常和 DCS 通用。</p><h5 id="RK-平台"><a href="#RK-平台" class="headerlink" title="RK 平台"></a><strong>RK 平台</strong></h5><p>上述两个例子举完了。我们继续写 RK 平台 RM72014 的 inital cmds：</p><p>对应的 inital cmds<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> disp_mipi_init_cmds: screen-on-cmds &#123;</span><br><span class="line"> rockchip,cmd_debug = &lt;0&gt;;</span><br><span class="line"> compatible = &quot;rockchip,screen-on-cmds&quot;;</span><br><span class="line"> rockchip,on-cmds1 &#123;</span><br><span class="line"> compatible = &quot;rockchip,on-cmds&quot;;</span><br><span class="line"> rockchip,cmd_type = &lt;LPDT&gt;;</span><br><span class="line"> rockchip,dsi_id = &lt;2&gt;;</span><br><span class="line"> rockchip,cmd = &lt;0x15 0x53 0x24&gt;;</span><br><span class="line"> rockchip,cmd_delay = &lt;0&gt;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> rockchip,on-cmds2 &#123;</span><br><span class="line"> compatible = &quot;rockchip,on-cmds&quot;;</span><br><span class="line"> rockchip,cmd_type = &lt;LPDT&gt;;</span><br><span class="line"> rockchip,dsi_id = &lt;2&gt;;</span><br><span class="line"> rockchip,cmd = &lt;0x39 0xf0 0x5a 0x5a&gt;;</span><br><span class="line"> rockchip,cmd_delay = &lt;30&gt;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> rockchip,on-cmds3 &#123;</span><br><span class="line"> compatible = &quot;rockchip,on-cmds&quot;;</span><br><span class="line"> rockchip,cmd_type = &lt;LPDT&gt;;</span><br><span class="line"> rockchip,dsi_id = &lt;2&gt;;</span><br><span class="line"> rockchip,cmd = &lt;0x05 0x11&gt;;</span><br><span class="line"> rockchip,cmd_delay = &lt;100&gt;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">  rockchip,on-cmds4 &#123;</span><br><span class="line"> compatible = &quot;rockchip,on-cmds&quot;;</span><br><span class="line"> rockchip,cmd_type = &lt;LPDT&gt;;</span><br><span class="line"> rockchip,dsi_id = &lt;2&gt;;</span><br><span class="line"> rockchip,cmd = &lt;0x05 0x29&gt;;</span><br><span class="line"> rockchip,cmd_delay = &lt;30&gt;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">//... </span><br><span class="line"></span><br><span class="line">  rockchip,on-cmds11 &#123;</span><br><span class="line"> compatible = &quot;rockchip,on-cmds&quot;;</span><br><span class="line"> rockchip,cmd_type = &lt;LPDT&gt;;</span><br><span class="line"> rockchip,dsi_id = &lt;2&gt;;</span><br><span class="line"> rockchip,cmd = &lt;0x15 0xf0 0x5a&gt;;</span><br><span class="line"> rockchip,cmd_delay = &lt;0&gt;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">  rockchip,on-cmds12 &#123;</span><br><span class="line"> compatible = &quot;rockchip,on-cmds&quot;;</span><br><span class="line"> rockchip,cmd_type = &lt;LPDT&gt;;</span><br><span class="line"> rockchip,dsi_id = &lt;2&gt;;</span><br><span class="line"> rockchip,cmd = &lt;0x15 0xf5 0x80&gt;;</span><br><span class="line"> rockchip,cmd_delay = &lt;120&gt;;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><p><strong>cmd_type</strong> 表示 dsi 传输类型，分为 HSDT 高速（Video 模式） 和 LPDT 低速（command 模式）<br><strong>dsi_id</strong> 表示通过哪一组 mipi 发送。0 表示第一组 Mipi ，2 表示两组同时发。1 表示第二组 Mipi，但是一般不会出现只用第二组的情况，所以不会是 1 。</p><h3 id="2-2-硬件管脚-GPIO-配置"><a href="#2-2-硬件管脚-GPIO-配置" class="headerlink" title="2.2 硬件管脚 GPIO 配置"></a>2.2 硬件管脚 GPIO 配置</h3><p> 有两种方式控制屏相关的 GPIO，一种是在屏 dtsi 中配置，一种是交由 vop 进行控制。</p><p> 前者的例子如下，比如可以在 dtsi 中完成电源控制配置<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> ## 屏电源控制配置</span><br><span class="line">disp_mipi_power_ctr: mipi_power_ctr &#123;</span><br><span class="line">        compatible = <span class="string">"rockchip,mipi_power_ctr"</span>;</span><br><span class="line">        mipi_lcd_rst:mipi_lcd_rst&#123;</span><br><span class="line">                compatible = <span class="string">"rockchip,lcd_rst"</span>;</span><br><span class="line">                rockchip,gpios = &lt;&amp;gpio4 GPIO_D6 GPIO_ACTIVE_HIGH&gt;;</span><br><span class="line">                rockchip,delay = &lt;<span class="number">10</span>&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 配置 lcd_en GPIO 哪一路 ，有可能没有 LCD_EN 那么就是 VCC 常供电</span></span><br><span class="line">        mipi_lcd_en:mipi_lcd_en &#123;</span><br><span class="line">                compatible = <span class="string">"rockchip,lcd_en"</span>;</span><br><span class="line">                rockchip,gpios = &lt;&amp;gpio1 GPIO_B5 GPIO_ACTIVE_HIGH&gt;;</span><br><span class="line">                rockchip,delay = &lt;<span class="number">10</span>&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//还可能有片选 cs</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>也可以交由 vop 控制，比如这样：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&amp;vopl_rk_fb &#123;</span><br><span class="line">status = <span class="string">"okay"</span>;</span><br><span class="line">  rockchip,prop = &lt;PRMRY&gt;;</span><br><span class="line">  assigned-clocks = &lt;&amp;cru DCLK_VOP1_DIV&gt;;</span><br><span class="line">  assigned-clock-parents = &lt;&amp;cru PLL_CPLL&gt;;</span><br><span class="line">power_ctr: power_ctr &#123;</span><br><span class="line">rockchip,debug = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">lcd_en: lcd-en &#123;</span><br><span class="line">rockchip,power_type = &lt;GPIO&gt;;</span><br><span class="line">gpios = &lt;&amp;gpio1 GPIO_B5 GPIO_ACTIVE_HIGH&gt;;</span><br><span class="line">rockchip,delay = &lt;<span class="number">10</span>&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">lcd_rst: lcd-rst &#123;</span><br><span class="line">rockchip,power_type = &lt;GPIO&gt;;</span><br><span class="line">gpios = &lt;&amp;gpio4 GPIO_D6 GPIO_ACTIVE_HIGH&gt;;</span><br><span class="line">rockchip,delay = &lt;<span class="number">10</span>&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>GPIO_A / B C 的定义在 kernel/arch/arm64/boot/dts/include/dt-binding/pinctl/rk.h 中<br>delay 需要根据上面的时序图进行设置，一般 10ms 可以适配大部分的屏幕了。<br>这里的 rockchip,gpios 我们根据硬件进行配置：</p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fhey171zzuj20c00jbwfr.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fheygh9086j20jl012weg.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rockchip,gpios = &lt;&amp;gpio4 30 GPIO_ACTIVE_HIGH&gt;;  // GPIO4_D6</span><br></pre></td></tr></table></figure></p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fheyeyrrc8j20gx00swef.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rockchip,gpios = &lt;&amp;gpio1 13 GPIO_ACTIVE_HIGH&gt;; //GPIO1_B5</span><br></pre></td></tr></table></figure></p><h2 id="三、背光-Backlight"><a href="#三、背光-Backlight" class="headerlink" title="三、背光 Backlight"></a>三、背光 Backlight</h2><p>背光常用的有三种情况：<br>一是 常开。<br>二是 背光 IC 使能后，输入 PWM 信号调光。<br>三是 背光 IC 使能后，通过 FB 获得反馈自动进行调光。</p><p>比如我曾用到一颗 背光 IC 是这样的：</p><p><img src="http://ww4.sinaimg.cn/large/ba061518gw1f75tvya4xlj20t90bf0zo.jpg" alt="enter description here"></p><p><img src="http://ww2.sinaimg.cn/large/ba061518gw1f75tu7eik2j20930dfwfw.jpg" alt="enter description here"></p><p>我们了解到 EN 拉高时背光使能，拉低时背光禁能; FB 接受反馈信号，动态控制背光亮度。</p><p>根据相关的原理图 </p><p><img src="http://ww4.sinaimg.cn/large/ba061518gw1f75u6elg5wj20na0cudi8.jpg" alt="enter description here"><br><img src="http://ww3.sinaimg.cn/large/ba061518gw1f75u78v1czj20c703uwfg.jpg" alt="enter description here"></p><p>BL_EN 是普通的 GPIO ，LCDC_BL 是支持 PWM 输出的管脚，所以得知我们硬件采用的是第二种调光方式</p><p>完成 dts 中 backlight 相关的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">backlight &#123;</span><br><span class="line">        compatible = &quot;pwm-backlight&quot;;</span><br><span class="line">        pwms = &lt;&amp;pwm0 0 25000&gt;;     //在这里配置采用的是 pwm0 还是 pwm1</span><br><span class="line">        brightness-levels = &lt;255 254 253 252 251 250 249 248 247 246 245 244 243 242 241 240</span><br><span class="line">             239 238 237 236 235 234 233 232 231 230 229 228 227 226 225 224 223 222 221 220</span><br><span class="line">             219 218 217 216 215 214 213 212 211 210 209 208 207 206 205 204 203 202 201 200</span><br><span class="line">             199 198 197 196 195 194 193 192 191 190 189 188 187 186 185 184 183 182 181 180</span><br><span class="line">             179 178 177 176 175 174 173 172 171 170 169 168 167 166 165 164 163 162 161 160</span><br><span class="line">             159 158 157 156 155 154 153 152 151 150 149 148 147 146 145 144 143 142 141 140</span><br><span class="line">             139 138 137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120</span><br><span class="line">             119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100</span><br><span class="line">             99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70</span><br><span class="line">             69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40</span><br><span class="line">             39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10</span><br><span class="line">             9 8 7 6 5 4 3 2 1 0&gt;;</span><br><span class="line">        default-brightness-level = &lt;200&gt;;</span><br><span class="line">        enable-gpios = &lt;&amp;gpio7 GPIO_A2 GPIO_ACTIVE_HIGH&gt;;   //BL_EN 背光使能管脚</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><h2 id="四、确认驱动代码和-vop-lcdc-通道打开"><a href="#四、确认驱动代码和-vop-lcdc-通道打开" class="headerlink" title="四、确认驱动代码和 vop/lcdc 通道打开"></a>四、确认驱动代码和 vop/lcdc 通道打开</h2><p>make menuconfig 确认一下三个宏打开</p><p><img src="http://ww2.sinaimg.cn/large/ba061518gw1f75ubbrqosj20c703275b.jpg" alt="enter description here"></p><p>dts 中确认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// RK3399 平台</span><br><span class="line">&amp;mipi0_rk_fb &#123;</span><br><span class="line">  status = &quot;disabled&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// RK3288 平台</span><br><span class="line">&amp;dsi_host &#123;</span><br><span class="line">  status = &quot;disabled&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="五、调试流程"><a href="#五、调试流程" class="headerlink" title="五、调试流程"></a>五、调试流程</h2><p>一般按照上面的顺序，编译，烧录后。<br>幸运的话，屏就可以点亮（有东西显示）了。</p><p>但是这个世界对长的帅的人就是如此不公平。<br>至少我从来没有一次就直接点亮过。</p><p>下面我们开始进入调试阶段。</p><h3 id="5-1-检查电压"><a href="#5-1-检查电压" class="headerlink" title="5.1 检查电压"></a>5.1 检查电压</h3><p>检查原理图上各个供电管脚的电压<br>VCC 、VCC IO 是否正常。<br>VCC IO 是给 GPIO 供电用，比如 RST。有的屏会兼容 3.3V 和 1.8 V 的 IO 电平，但是大部分不会。<br>VCC_LCDA 、VCC_LCDK 电压是否满足要求。</p><p>确认电压正常后，关机，上屏，结合 开机 Log 看屏部分是否正常初始化。</p><h3 id="5-2-背光是否正常"><a href="#5-2-背光是否正常" class="headerlink" title="5.2 背光是否正常"></a>5.2 背光是否正常</h3><p>背光没亮的话确认一下接上屏的时候，量一量 VDD_LCDA 的电压为多少（串联电路大概能到 20V+）<br>没有就去检查背光电路供电电压和 backlight 相关的配置（比如背光功能使能的 GPIO 有没有控制到、PWM通道是否配置正确）。</p><h3 id="5-3-framebuffer-是否有数据产生"><a href="#5-3-framebuffer-是否有数据产生" class="headerlink" title="5.3 framebuffer 是否有数据产生"></a>5.3 framebuffer 是否有数据产生</h3><p>3368/3399 的命令为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo bmp &gt; sys/class/graphics/fb0/dump_buf </span><br><span class="line">或者</span><br><span class="line">echo bin &gt; sys/class/graphics/fb0/dump_buf</span><br></pre></td></tr></table></figure></p><p>312x 的命令为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/graphics/fb0 &gt; /data/fb0.yuv</span><br></pre></td></tr></table></figure></p><p>将生成的文件 adb pull 出来后可以通过图片查看软件,譬如 7YUV 读取输出的 bmp 文件或者 bin 文件。<br>如果有软件能正常显示画面，说明是 mipi 的问题。<br>如果软件不能正常显示画面,说明 fb 刷下来的数据有问题</p><h3 id="5-4-打印-Mipi-LCD-相关-Log-信息"><a href="#5-4-打印-Mipi-LCD-相关-Log-信息" class="headerlink" title="5.4 打印 Mipi LCD 相关 Log 信息"></a>5.4 打印 Mipi LCD 相关 Log 信息</h3><p>打开 Mipi DBG 的接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">driver/video/rockchip/transmitter/rk32_mipi_dsi.c 中的:</span><br><span class="line">#define MIPI_DBG(x...) printk(KERN_INFO x)</span><br><span class="line"></span><br><span class="line">driver/video/rockchip/screen/lcd_mipi.c 中的:</span><br><span class="line">#define MIPI_SCREEN_DBG(x...) printk(KERN_ERR x)</span><br></pre></td></tr></table></figure></p><p>看看 log 中是否有异常。</p><p>譬如<br>probe 函数是否正常;<br>是否有调用到 rk32_dsi_enable() 函数,该函数为 lcdc 调用 mipi 的入口函数;<br>初始化 mipi 的过程中是否有报错等等</p><p>电源控制部分对应的操作函数:driver/video/rockchip/screen/lcd_mipi.c 的<br>rk_mipi_screen_pwr_enable(),rk_mipi_screen_pwr_disable()。</p><p>Clock 部分在 drivers/video/rockchip/transmitter/rk32_mipi_dsi.c 可以添加如下打印<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">256</span> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rk312x_mipi_dsi_phy_set_gotp</span><span class="params">(struct dsi *dsi, u32 offset, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"> 257 </span>&#123;</span><br><span class="line"> <span class="number">258</span>     u32 val = <span class="number">0</span>, temp = <span class="number">0</span>, Tlpx = <span class="number">0</span>;</span><br><span class="line"> <span class="number">259</span>     u32 ddr_clk = dsi-&gt;phy.ddr_clk;</span><br><span class="line"> <span class="number">260</span>     u32 Ttxbyte_clk = dsi-&gt;phy.Ttxbyte_clk;</span><br><span class="line"> <span class="number">261</span>     u32 Tsys_clk = dsi-&gt;phy.Tsys_clk;</span><br><span class="line"> <span class="number">262</span>     u32 Ttxclkesc = dsi-&gt;phy.Ttxclkesc;</span><br><span class="line"> <span class="number">263</span>     printk(<span class="string">"%s : ddr_clk %d\n"</span>, __func__, ddr_clk);</span><br><span class="line"> </span><br><span class="line"><span class="number">1123</span> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rk32_mipi_dsi_enable_hs_clk</span><span class="params">(<span class="keyword">void</span> *arg, u32 enable)</span></span></span><br><span class="line"><span class="function">1124 </span>&#123;</span><br><span class="line"><span class="number">1125</span>     <span class="class"><span class="keyword">struct</span> <span class="title">dsi</span> *<span class="title">dsi</span> = <span class="title">arg</span>;</span></span><br><span class="line"><span class="number">1126</span>     printk(<span class="string">"rk32_mipi_dsi_enable_hs_clk,enable=%d\n"</span>,enable);</span><br><span class="line"><span class="number">1127</span>     rk32_dsi_set_bits(dsi, enable, phy_txrequestclkhs);</span><br><span class="line"><span class="number">1128</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">1129</span> &#125;</span><br></pre></td></tr></table></figure></p><p>dts 中也有一些 Debug 的开关可以打开以协助分析问题。RK 手册中会有更加详细的描述，这里不赘述了。</p><h3 id="5-5-上电时序是否正常"><a href="#5-5-上电时序是否正常" class="headerlink" title="5.5 上电时序是否正常"></a>5.5 上电时序是否正常</h3><p>根据前面我们从 datasheet 中扣出来的上电时序图</p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimsjacg20j20jk0h70u5.jpg" alt=""></p><p>确认上电时序是否正常，VCC、RST、MIPI 顺序是否正常。</p><ol><li>VCC 使能有没有起作用。</li><li>RST 是否有一个 低-高 的变化，没有则是 rst 设置的触发方式可能反了 </li><li>在 RST 变高后会开始传输数据，量 lanes 是否有数据输出。抓取数据需要一定规格的示波器和差分探头，我们用普通的示波器大致看看有没有数据输出就够了。</li></ol><p>如果到这篇文章中的所有办法都用完了还没有点亮，只能来这里重新测 data 和 clk 波形是否正常。<br>如果也正常,那就需要确认 mipi phy 是否把初始化命令正确发送出来。用差分探头在单端模式下抓 mipi phy 的 lane0N 和 lane0P。<br>命令也是正常的，屏依旧还没有点亮，只能进一步分析 mipi 协议了。</p><h3 id="5-6-clock-是否正常"><a href="#5-6-clock-是否正常" class="headerlink" title="5.6 clock 是否正常"></a>5.6 clock 是否正常</h3><p>用示波器量波形看 DCLK 的频率为多少，是否为 dsi_hs_clk 中设置的（可能实际的会略低一点）。<br>实际的 DCLK 是否满足屏的要求。</p><h3 id="5-7-可以显示了但是-花屏-闪屏-抖动-等"><a href="#5-7-可以显示了但是-花屏-闪屏-抖动-等" class="headerlink" title="5.7 可以显示了但是 花屏/闪屏/抖动 等"></a>5.7 可以显示了但是 花屏/闪屏/抖动 等</h3><p>见后面的问题集锦</p><h3 id="5-8-进一步分析-Mipi-协议"><a href="#5-8-进一步分析-Mipi-协议" class="headerlink" title="5.8 进一步分析 Mipi 协议"></a>5.8 进一步分析 Mipi 协议</h3><p>屏参、上电时序、clock 啥都确定是对的了。竟然还是无法点亮屏幕。<br>最后只能分析协议。<br>这是网友 @nice 碰到的问题。<br>最后发现是 LP00 的时间不对，RK 平台默认是 85ms，但是屏要求是 15ms。修改后正常。<br>参考文章：<a href="http://blog.csdn.net/g_salamander/article/details/9163455" target="_blank" rel="noopener">http://blog.csdn.net/g_salamander/article/details/9163455</a><br>我就不重复造轮子了。上面这篇文章写的非常好。等什么时候我有更深的感悟了也写一篇包含自己体会的 Mipi 协议分析博客好了。</p><h2 id="六、问题集锦"><a href="#六、问题集锦" class="headerlink" title="六、问题集锦"></a>六、问题集锦</h2><p>RK 的官方文档中描述了不少问题，我这边就不再赘述了。<br>以下是我碰到的一些问题的解决办法，还有一些从网上搜到的发挥了作用的解决办法，一并都附在这里了。</p><h3 id="6-1-RST-复位不正常"><a href="#6-1-RST-复位不正常" class="headerlink" title="6.1 RST 复位不正常"></a>6.1 RST 复位不正常</h3><p>我们 RST 是低电平有效，所以我想当然的将 RST 设置为<br>ACTIVE_LOW。</p><p>我在调试的时候发现 lane 一直为低电平，没有数据传输，然后采取量 RST 发现唤醒屏后待到屏幕快灭了 RST 才会被拉高。跟代码发现 RK 平台的实现是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">！你设置的触发电平</span><br><span class="line">你设置的触发电平</span><br></pre></td></tr></table></figure><p>我设置的触发电平是 低电平有效 ACTIVE_LOW<br>即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">！ACTIVE_LOW</span><br><span class="line">ACTIVE_LOW</span><br></pre></td></tr></table></figure></p><p>即先高再低。<br>所以是错的，改为 ACTIVE_HIGH 后正常。 </p><p>但是虽然填的是 ACTIVE_HIGH ，但是根据驱动应该还是属于低电平有效的，这里是 RK 平台 driver 的实现有问题。<br>修改后 lane 有数据传递了。</p><h3 id="6-2-有数据传输，但是-cmds-有问题"><a href="#6-2-有数据传输，但是-cmds-有问题" class="headerlink" title="6.2 有数据传输，但是 cmds 有问题"></a>6.2 有数据传输，但是 cmds 有问题</h3><p>cmds 有的参数超过了 32个字节（有个有36个字节，有个有39个字节），完成 dtsi 中 cmds 编写后<br>烧录，板子跑飞，空指针异常。<br>发现传递 这个超长 参数的时候有内存溢出情况。<br>于是跟代码发现 dcs_cmd.cmds 的数据类型为 int cmds[32]，所以擅自想当然的将包拆成了 39 = 28+11，还将其中的延时设置为 0 。<br>这样当然是不行的。但是一切都是基于这个拆了包的 cmds 来调，走了不少弯路。 </p><p>于是去联系原厂的工程师，说平台参数大小有限制，咨询拆包是否可行。<br>他们说可以直接修改 cmds 数组大小，将 cmds[32] 改成了 cmds[400] 。 </p><p>这个问题在 RK 后来的 kernel 中被更新了。</p><p>所以有时候碰到问题需要确认一下 kernel 是不是最新的，也许会有意想不到的效果。</p><h3 id="6-3-开机-Logo-闪烁，且水平方向向右偏移压缩了半个屏幕"><a href="#6-3-开机-Logo-闪烁，且水平方向向右偏移压缩了半个屏幕" class="headerlink" title="6.3 开机 Logo 闪烁，且水平方向向右偏移压缩了半个屏幕"></a>6.3 开机 Logo 闪烁，且水平方向向右偏移压缩了半个屏幕</h3><p>在点亮屏后刚开始有开机 logo 闪烁，向右偏移了近半个屏幕的长度。<br>重新确认 clock-frequence 后发现少打了一个 0 。<br>修改后解决了 闪烁，大偏移 的问题。</p><h3 id="6-4-偏移巨大"><a href="#6-4-偏移巨大" class="headerlink" title="6.4 偏移巨大"></a>6.4 偏移巨大</h3><p>如下面这张图，偏移的特别多，可能是 dclk 有问题，修改 dsi_hs_clk 由 504 降到 496 解决。</p><p><img src="https://ws4.sinaimg.cn/large/ba061518gw1f7aoi0o0haj20dx0mygqr.jpg" alt="enter description here"></p><p>比如下面这张图，也是偏移的很多，将 dclk 增加解决。</p><p><img src="http://ww1.sinaimg.cn/large/ba061518gy1fimzp6hrxmj20qo0zkjt1.jpg" alt=""></p><h3 id="6-5-偏移一点点"><a href="#6-5-偏移一点点" class="headerlink" title="6.5 偏移一点点"></a>6.5 偏移一点点</h3><p>如下图，一般修改 HBP、HFP、VBP、VFP 即可。</p><p><img src="https://ws2.sinaimg.cn/large/ba061518gw1f7ao7d3tatj20ic0w0n4y.jpg" alt="enter description here"></p><h3 id="6-6-水平方向似乎被裁剪（偏移）"><a href="#6-6-水平方向似乎被裁剪（偏移）" class="headerlink" title="6.6 水平方向似乎被裁剪（偏移）"></a>6.6 水平方向似乎被裁剪（偏移）</h3><p>如下图，实际是 HBP 的问题。<br>增大 HBP 后解决，将 HBP 由 10 增加到 30。</p><p><img src="https://ws3.sinaimg.cn/large/ba061518gw1f7aocxg04tj20km0dogod.jpg" alt="enter description here"></p><h3 id="6-7-正常开机可以点亮，休眠唤醒无法点亮。"><a href="#6-7-正常开机可以点亮，休眠唤醒无法点亮。" class="headerlink" title="6.7 正常开机可以点亮，休眠唤醒无法点亮。"></a>6.7 正常开机可以点亮，休眠唤醒无法点亮。</h3><p>dclk 有问题。<br>用示波器去测究竟 dclk 出来的是多少。<br>比如我设置的 470 开机启动可以点亮，休眠唤醒无法点亮。<br>用示波器一测，竟然才 200 Mbps，修改到 584 后（实际出来为 450） 休眠唤醒才也可以点亮。</p><h3 id="6-8-白屏（偶尔）"><a href="#6-8-白屏（偶尔）" class="headerlink" title="6.8 白屏（偶尔）"></a>6.8 白屏（偶尔）</h3><p>白屏有可能是静电问题，把 LCD 拿到头发上擦几下，如果很容易出现白屏那肯定就是静电问题了。<br>另外一个在有Backend IC的情况下，也有可能bypass没处理好。 </p><h3 id="6-9-白屏（开机-Logo-到-Android-动画之间）"><a href="#6-9-白屏（开机-Logo-到-Android-动画之间）" class="headerlink" title="6.9 白屏（开机 Logo 到 Android 动画之间）"></a>6.9 白屏（开机 Logo 到 Android 动画之间）</h3><p>結束開機logo至Android動畫出現之間出現閃屏或者閃白光的情況。<br>原因：在這個時間點kernel會會對屏再次初始化，我們可以軟件上屏蔽第一次初始化動作從而解决。</p><h3 id="6-10-白屏（进入睡眠-suspend-开始显示-resume-时）"><a href="#6-10-白屏（进入睡眠-suspend-开始显示-resume-时）" class="headerlink" title="6.10 白屏（进入睡眠 suspend / 开始显示 resume 时）"></a>6.10 白屏（进入睡眠 suspend / 开始显示 resume 时）</h3><p>喚醒屏幕閃白光問題，說白了是背光早亮了，很有可能是下序列mdelay太久，改小點就沒有這個問題了。根本原因屏幕初始化序列下慢了。<br>sleep out（0x11）和 display on（0x29）之间需要 mdelay（120ms）左右。</p><h3 id="6-11-花屏"><a href="#6-11-花屏" class="headerlink" title="6.11 花屏"></a>6.11 花屏</h3><p>LCD 初始化成功，但是 RGB 没有刷过来。<br>优先确认 timing 中的 pclk，另外还有可能是总线速度有问题。</p><p>开机花屏最简单的解决方式是，在 Init 结束的地方加一个刷黑屏的功能。也可以在睡眠函数里加延时函数。</p><h3 id="6-12-闪烁（快速，大量）"><a href="#6-12-闪烁（快速，大量）" class="headerlink" title="6.12 闪烁（快速，大量）"></a>6.12 闪烁（快速，大量）</h3><ol><li>pclk 有问题<br>在最开始的时候，我的 pclk 漏了一个 0 ，为之前的 1/10 此时就有图像闪烁问题。</li><li>proch 有问题<br>在调试完后，我尝试将 proch 增加到极限，发现会出现图像闪烁的问题。</li></ol><h3 id="6-13-闪烁（偶尔）"><a href="#6-13-闪烁（偶尔）" class="headerlink" title="6.13 闪烁（偶尔）"></a>6.13 闪烁（偶尔）</h3><p>通过调节电压来稳定，一般调节的电压为VRL、VRH、VDV和VCM</p><h3 id="6-14-闪烁（唤醒-resume-时）"><a href="#6-14-闪烁（唤醒-resume-时）" class="headerlink" title="6.14 闪烁（唤醒 resume 时）"></a>6.14 闪烁（唤醒 resume 时）</h3><p>RST 后下载初始化时序时间过长，适当减少 delay 时间可以解决。</p><h3 id="6-15-抖动"><a href="#6-15-抖动" class="headerlink" title="6.15 抖动"></a>6.15 抖动</h3><p>测时序，延时不足</p><h3 id="6-16-灰屏（唤醒时）"><a href="#6-16-灰屏（唤醒时）" class="headerlink" title="6.16 灰屏（唤醒时）"></a>6.16 灰屏（唤醒时）</h3><p>寄存器没有使能外部升压电路</p><h3 id="6-17-水波纹"><a href="#6-17-水波纹" class="headerlink" title="6.17 水波纹"></a>6.17 水波纹</h3><p>通常都是rgb interface polarity導致，需要調整pclk hsync vsync de極性使之符合平台極性</p><h3 id="6-18-调节对比度"><a href="#6-18-调节对比度" class="headerlink" title="6.18 调节对比度"></a>6.18 调节对比度</h3><p>VRL、VRH、VDV和VCM，这些电压也可以用来调节亮暗（对比度）<br>也可以通过调节Gamma值来实现，要调节的对象为 PRP、PRN、VRP、VRN 等</p><h3 id="6-19-图像颜色不正常"><a href="#6-19-图像颜色不正常" class="headerlink" title="6.19 图像颜色不正常"></a>6.19 图像颜色不正常</h3><p>可能时钟型号极性反了<br>可能 VCOM 调节不正常<br>进行 GAMMA 校正</p><h3 id="6-20-明暗色过渡部分，出现不停闪动的亮点"><a href="#6-20-明暗色过渡部分，出现不停闪动的亮点" class="headerlink" title="6.20 明暗色过渡部分，出现不停闪动的亮点"></a>6.20 明暗色过渡部分，出现不停闪动的亮点</h3><p>pixel clock 极性，由上升沿采样改为下降沿采样即可。</p><p>最后，我上面说的都是废话。<br>最好的资料就是 RK 官方的TRM 、屏的 Spec 和  Mipi DSI 协议规格书。<br>LCD 这边的变数太多了，一万个工程师可以碰到一万种屏不显示的情况。<br>网上搜再多资料也没有抓波、抓上电时序，对照官方手册确认 来的实在。</p><p>本文地址：<a href="http://blog.csdn.net/dearsq/article/details/77341120" target="_blank" rel="noopener">http://blog.csdn.net/dearsq/article/details/77341120</a><br>作者 Younix，欢迎转载，转载请著名出处，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实之前有写过一篇关于 =&lt;a href=&quot;http://blog.csdn.net/dearsq/article
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_WebView_XML和JSON</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_WebView_XML%E5%92%8CJSON/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_WebView_XML和JSON/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:35:15.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>两种解析方法</p><h2 id="JSONObject"><a href="#JSONObject" class="headerlink" title="JSONObject"></a>JSONObject</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void parseJSONWithJSONObject(String jsonData) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 定义 JASON 数组 , 将服务器返回的数据传入到了 JSONObject 对象中</span><br><span class="line">            JSONArray jsonArray = new JSONArray(jsonData);</span><br><span class="line">            for(int i = 0; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">                JSONObject jsonObject = jsonArray.getJSONObject(i);</span><br><span class="line">                String id = jsonObject.getString(&quot;id&quot;);</span><br><span class="line">                String name = jsonObject.getString(&quot;name&quot;);</span><br><span class="line">                String version = jsonObject.getString(&quot;version&quot;);</span><br><span class="line"></span><br><span class="line">                Log.d(TAG, &quot;parseJSONWithJSONObject: id is &quot;+id);</span><br><span class="line">                Log.d(TAG, &quot;parseJSONWithJSONObject: name is &quot;+name);</span><br><span class="line">                Log.d(TAG, &quot;parseJSONWithJSONObject: version is &quot;+version);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (JSONException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GSON"><a href="#GSON" class="headerlink" title="GSON"></a>GSON</h2><p>比如要解析 App 类型的数据</p><ol><li>先实现 App 类:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String version;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getVersion() &#123;</span><br><span class="line">        return version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setVersion(String version) &#123;</span><br><span class="line">        this.version = version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后直接利用 json 创建对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void parseJSONWithGSON(String jsonData) &#123;</span><br><span class="line">    Gson gson = new Gson();</span><br><span class="line">    List&lt;App&gt; appList = gson.fromJson(jsonData, new TypeToken&lt;List&lt;App&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    for (App app : appList) &#123;</span><br><span class="line">        Log.d(TAG, &quot;parseJSONWithGSON: id is &quot; + app.getId());</span><br><span class="line">        Log.d(TAG, &quot;parseJSONWithGSON: name is &quot; + app.getName());</span><br><span class="line">        Log.d(TAG, &quot;parseJSONWithGSON: version is &quot; + app.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="Pull-解析"><a href="#Pull-解析" class="headerlink" title="Pull 解析"></a>Pull 解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseXMLWithPull</span><span class="params">(String xmlData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 工厂类 , 借助工厂类实例的 nuwPullParser() 获得 XmlPullParse 的实例</span></span><br><span class="line">            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</span><br><span class="line">            XmlPullParser xmlPullParser = factory.newPullParser();</span><br><span class="line">            <span class="comment">// 2. setInput() 将服务器返回的 XML 数据 (xmlData) 设置进去并开始解析</span></span><br><span class="line">            xmlPullParser.setInput(<span class="keyword">new</span> StringReader(xmlData));</span><br><span class="line">            <span class="comment">// 3. 开始解析</span></span><br><span class="line">            <span class="comment">// 3.1 getEventType() 获取当前的解析事件</span></span><br><span class="line">            <span class="keyword">int</span> eventType = xmlPullParser.getEventType();</span><br><span class="line">            String id = <span class="string">""</span>;</span><br><span class="line">            String name = <span class="string">""</span>;</span><br><span class="line">            String version = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">// 3.2 循环解析当前节点 直到 文件结束</span></span><br><span class="line">            <span class="keyword">while</span> (eventType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                String nodeName = xmlPullParser.getName();</span><br><span class="line">                <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">                    <span class="comment">// 开始解析某个节点</span></span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.START_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"id"</span>.equals(nodeName))&#123;</span><br><span class="line">                            id = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"version"</span>.equals(nodeName)) &#123;</span><br><span class="line">                            version = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"name"</span>.equals(nodeName)) &#123;</span><br><span class="line">                            name = xmlPullParser.nextText();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 完成解析某个节点</span></span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.END_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"app"</span>.equals(nodeName)) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"parseXMLWithPull id is "</span> + id);</span><br><span class="line">                            Log.d(TAG, <span class="string">"parseXMLWithPull name is "</span> + name);</span><br><span class="line">                            Log.d(TAG, <span class="string">"parseXMLWithPull version is"</span> + version);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                eventType =  xmlPullParser.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="SAX-解析"><a href="#SAX-解析" class="headerlink" title="SAX 解析"></a>SAX 解析</h2><p>MainActivity.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private void parseXMLWithSAX(String xmlData) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建工厂类</span><br><span class="line">            SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">            // 通过工厂类获取 XMLReader 对象</span><br><span class="line">            XMLReader xmlReader = factory.newSAXParser().getXMLReader();</span><br><span class="line"></span><br><span class="line">            ContentHandler handler = new ContentHandler();</span><br><span class="line">            //设置 ContentHanlder 实例到 XMLReader 中</span><br><span class="line">            xmlReader.setContentHandler(handler);</span><br><span class="line">            //开始执行解析</span><br><span class="line">            xmlReader.parse(new InputSource(new StringReader(xmlData)));</span><br><span class="line">        &#125; catch (SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ParserConfigurationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>ContentHandler.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ContentHandler extends DefaultHandler &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TAG = &quot;ContentHandler&quot;;</span><br><span class="line"></span><br><span class="line">    private String nodeName;</span><br><span class="line">    private StringBuilder id;</span><br><span class="line">    private StringBuilder name;</span><br><span class="line">    private StringBuilder version;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Receive notification of the beginning of the document.</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * &lt;p&gt;By default, do nothing.  Application writers may override this</span><br><span class="line">     * method in a subclass to take specific actions at the beginning</span><br><span class="line">     * of a document (such as allocating the root node of a tree or</span><br><span class="line">     * creating an output file).&lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * @throws SAXException Any SAX exception, possibly</span><br><span class="line">     *                      wrapping another exception.</span><br><span class="line">     * @see org.xml.sax.ContentHandler#startDocument</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void startDocument() throws SAXException &#123;</span><br><span class="line">        id = new StringBuilder();</span><br><span class="line">        name = new StringBuilder();</span><br><span class="line">        version = new StringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Receive notification of the end of the document.</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * &lt;p&gt;By default, do nothing.  Application writers may override this</span><br><span class="line">     * method in a subclass to take specific actions at the end</span><br><span class="line">     * of a document (such as finalising a tree or closing an output</span><br><span class="line">     * file).&lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * @throws SAXException Any SAX exception, possibly</span><br><span class="line">     *                      wrapping another exception.</span><br><span class="line">     * @see org.xml.sax.ContentHandler#endDocument</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void endDocument() throws SAXException &#123;</span><br><span class="line">        super.endDocument();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Receive notification of the start of an element.</span><br><span class="line">     * 记录当前节点名字</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * &lt;p&gt;By default, do nothing.  Application writers may override this</span><br><span class="line">     * method in a subclass to take specific actions at the start of</span><br><span class="line">     * each element (such as allocating a new tree node or writing</span><br><span class="line">     * output to a file).&lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param uri        The Namespace URI, or the empty string if the</span><br><span class="line">     *                   element has no Namespace URI or if Namespace</span><br><span class="line">     *                   processing is not being performed.</span><br><span class="line">     * @param localName  The local name (without prefix), or the</span><br><span class="line">     *                   empty string if Namespace processing is not being</span><br><span class="line">     *                   performed.</span><br><span class="line">     * @param qName      The qualified name (with prefix), or the</span><br><span class="line">     *                   empty string if qualified names are not available.</span><br><span class="line">     * @param attributes The attributes attached to the element.  If</span><br><span class="line">     *                   there are no attributes, it shall be an empty</span><br><span class="line">     *                   Attributes object.</span><br><span class="line">     * @throws SAXException Any SAX exception, possibly</span><br><span class="line">     *                      wrapping another exception.</span><br><span class="line">     * @see org.xml.sax.ContentHandler#startElement</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123;</span><br><span class="line">        // 记录当前节点名字</span><br><span class="line">        nodeName = localName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Receive notification of character data inside an element.</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * &lt;p&gt;By default, do nothing.  Application writers may override this</span><br><span class="line">     * method to take specific actions for each chunk of character data</span><br><span class="line">     * (such as adding the data to a node or buffer, or printing it to</span><br><span class="line">     * a file).&lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param ch     The characters.</span><br><span class="line">     * @param start  The start position in the character array.</span><br><span class="line">     * @param length The number of characters to use from the</span><br><span class="line">     *               character array.</span><br><span class="line">     * @throws SAXException Any SAX exception, possibly</span><br><span class="line">     *                      wrapping another exception.</span><br><span class="line">     * @see org.xml.sax.ContentHandler#characters</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void characters(char[] ch, int start, int length) throws SAXException &#123;</span><br><span class="line">        // 根据当前的节点名判断将内容添加到哪一个 StringBuilder 中</span><br><span class="line">        if (&quot;id&quot;.equals(nodeName)) &#123;</span><br><span class="line">            id.append(ch, start, length);</span><br><span class="line">        &#125; else if (&quot;name&quot;.equals(nodeName)) &#123;</span><br><span class="line">            name.append(ch, start, length);</span><br><span class="line">        &#125; else if (&quot;version&quot;.equals(nodeName)) &#123;</span><br><span class="line">            version.append(ch, start, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Receive notification of the end of an element.</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * &lt;p&gt;By default, do nothing.  Application writers may override this</span><br><span class="line">     * method in a subclass to take specific actions at the end of</span><br><span class="line">     * each element (such as finalising a tree node or writing</span><br><span class="line">     * output to a file).&lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param uri       The Namespace URI, or the empty string if the</span><br><span class="line">     *                  element has no Namespace URI or if Namespace</span><br><span class="line">     *                  processing is not being performed.</span><br><span class="line">     * @param localName The local name (without prefix), or the</span><br><span class="line">     *                  empty string if Namespace processing is not being</span><br><span class="line">     *                  performed.</span><br><span class="line">     * @param qName     The qualified name (with prefix), or the</span><br><span class="line">     *                  empty string if qualified names are not available.</span><br><span class="line">     * @throws SAXException Any SAX exception, possibly</span><br><span class="line">     *                      wrapping another exception.</span><br><span class="line">     * @see org.xml.sax.ContentHandler#endElement</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void endElement(String uri, String localName, String qName) throws SAXException &#123;</span><br><span class="line">        if (&quot;app&quot;.equals(localName)) &#123;</span><br><span class="line">            Log.d(TAG, &quot;endElement: id is &quot; + id.toString().trim());</span><br><span class="line">            Log.d(TAG, &quot;endElement: name is &quot; + name.toString().trim());</span><br><span class="line">            Log.d(TAG, &quot;endElement: version is &quot; + version.toString().trim());</span><br><span class="line">            // 最后将 StringBuilder 清空</span><br><span class="line">            id.setLength(0);</span><br><span class="line">            name.setLength(0);</span><br><span class="line">            version.setLength(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;p&gt;两种解析方法&lt;/p&gt;
&lt;h2 id=&quot;JSONObject&quot;&gt;&lt;a href=&quot;#JSONObject&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_WebView</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_WebView/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_WebView/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:38:15.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebView-使用-SOP"><a href="#WebView-使用-SOP" class="headerlink" title="WebView 使用 SOP"></a>WebView 使用 SOP</h2><h3 id="activity-xml"><a href="#activity-xml" class="headerlink" title="activity.xml"></a>activity.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/web_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">WebView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WebView mWebView = findViewById(R.id.web_view);</span><br><span class="line"><span class="comment">// 支持 JS 脚本</span></span><br><span class="line">mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 当跳转网页的时候, 我们希望还是在当前 WebView 中,而不是访问浏览器</span></span><br><span class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br><span class="line"><span class="comment">// 默认展现的网页</span></span><br><span class="line">mWebView.loadUrl(<span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="特殊注意事项"><a href="#特殊注意事项" class="headerlink" title="特殊注意事项"></a>特殊注意事项</h2><h3 id="子线程中完成服务器结束响应后的回调"><a href="#子线程中完成服务器结束响应后的回调" class="headerlink" title="子线程中完成服务器结束响应后的回调"></a>子线程中完成服务器结束响应后的回调</h3><p>在获取到服务器响应数据后, 可以对其进行解析和处理.<br>但是网络请求是耗时操作, 需要放在子线程中进行.</p><h2 id="WebView-Http-基本介绍"><a href="#WebView-Http-基本介绍" class="headerlink" title="WebView_Http 基本介绍"></a>WebView_Http 基本介绍</h2><p>Client 向 Server 发一条请求 ,<br>Server 收到后返回一些数据给 Client ,<br>Client 对数据进行解析和处理</p><h2 id="HttpURLConnection-SOP"><a href="#HttpURLConnection-SOP" class="headerlink" title="HttpURLConnection SOP"></a>HttpURLConnection SOP</h2><ol><li><p>实例化对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL url = new URL(&quot;http://www.iyounix.com&quot;);</span><br><span class="line">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br></pre></td></tr></table></figure></li><li><p>设置 Http 请求所使用的方法<br>GET 希望从服务器获取数据<br>POST 希望提交数据给服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">// 设置连接超时</span><br><span class="line">connection.setConnectTimeout(8000);</span><br><span class="line">// 设置读取超时</span><br><span class="line">connection.setReadTimeout(8000);</span><br></pre></td></tr></table></figure></li><li><p>获取服务器返回的输入流 getInputStream()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = connection.getInputStream();</span><br></pre></td></tr></table></figure></li></ol><p>获取到的输入流可以拿来 进行 各种骚操作.</p><p>example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = connection.getInputStream();</span><br><span class="line">   reader = new BufferedReader(new InputStreamReader(in));</span><br><span class="line">   StringBuilder response = new StringBuilder();</span><br><span class="line">   String line; //读到读完为止</span><br><span class="line">   while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">       response.append(line);</span><br><span class="line">   &#125;</span><br><span class="line">   // Android 的子线程中是无法进行 UI 界面的刷新的</span><br><span class="line">   // 通过调用 runOnUiThread 回到主线程进行 UI 的刷新</span><br><span class="line">   showResponse(response.toString());</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>提交数据给服务器 getOutputStream()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">   DataOutputStream out = new DataOutputStream(connection.getOutputStream());</span><br><span class="line">   out.writeBytes(&quot;username=admin &amp; password=123456&quot;);</span><br></pre></td></tr></table></figure></li><li><p>关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.disconnect();</span><br></pre></td></tr></table></figure></li></ol><h2 id="WebView-OKHttp-基本介绍"><a href="#WebView-OKHttp-基本介绍" class="headerlink" title="WebView_OKHttp 基本介绍"></a>WebView_OKHttp 基本介绍</h2><p>Square 公司开发.<br><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">https://github.com/square/okhttp</a></p><h2 id="OKHttp-SOP"><a href="#OKHttp-SOP" class="headerlink" title="OKHttp SOP"></a>OKHttp SOP</h2><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">implementation &apos;com.squareup.okhttp3:okhttp:3.4.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="MainActivity-java-1"><a href="#MainActivity-java-1" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 1. 创建 OkHttpClient 实例 </span><br><span class="line">OKHttpClient client = new OkHttpClient();</span><br><span class="line"></span><br><span class="line">// 2. 创建 Request 对象用来发送请求</span><br><span class="line">Request request = new Request.Builder().build();    </span><br><span class="line">    // 可以通过连缀其他方法丰富 Request 对象</span><br><span class="line">    Request request = new Request.Builder()</span><br><span class="line">    .url(&quot;http://www.iyounix.com&quot;)</span><br><span class="line">                        .build();</span><br><span class="line">                        </span><br><span class="line">// 3.1 获取服务器返回的数据 GET</span><br><span class="line">Response response = client.newCall(request).execute();</span><br><span class="line">// 如下获取返回的具体的内容</span><br><span class="line">    String reponseData = response.body().string();</span><br><span class="line"></span><br><span class="line">// 3.2 向服务器发送请求  POST</span><br><span class="line">// 构建 RequestBody 对象存放待提交的参数</span><br><span class="line">RequestBody requestBody = new FormBody.Builder()</span><br><span class="line">    .add(&quot;username&quot;,  &quot;admin&quot;)</span><br><span class="line">                                .add(&quot;password&quot;,  &quot;123456&quot;)</span><br><span class="line">                                .build();</span><br><span class="line">// post()</span><br><span class="line">    Request request = new Request.Builder()</span><br><span class="line">    .url(&quot;http://www.iyounix.com&quot;)</span><br><span class="line">                            .post(requestBody)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">    // execute() 请求并获取返回的数据</span><br><span class="line">Response response = client.newCall(request).execute();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebView-使用-SOP&quot;&gt;&lt;a href=&quot;#WebView-使用-SOP&quot; class=&quot;headerlink&quot; title=&quot;WebView 使用 SOP&quot;&gt;&lt;/a&gt;WebView 使用 SOP&lt;/h2&gt;&lt;h3 id=&quot;activity-xml&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_MediaPlayer</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_MediaPlayer/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_MediaPlayer/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:35:49.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用控制方法"><a href="#常用控制方法" class="headerlink" title="常用控制方法"></a>常用控制方法</h2><p>Android 通过控制播放器的状态的方式来控制媒体文件的播放，其中：</p><p><code>setDataSource()</code> 设置要播放的音频文件位置<br><code>prepare()和 prepareAsync()</code> 完成准备工作<br>提供了同步和异步两种方式设置播放器进入prepare状态，<br>需要注意的是，如果MediaPlayer实例是由create方法创建的，那么第一次启动播放前不需要再调用prepare（）了，因为create方法里已经调用过了。<br><code>start()</code>是真正启动文件播放的方法，<br><code>pause()</code> 暂停播放<br><code>stop()</code> 停止播放<br><code>seekTo()</code> 是定位方法，可以让播放器从指定的位置开始播放，<br>需要注意的是该方法是个异步方法，也就是说该方法返回时并不意味着定位完成，尤其是播放的网络文件，真正定位完成时会触发OnSeekComplete.onSeekComplete()，如果需要是可以调用 setOnSeekCompleteListener(OnSeekCompleteListener)设置监听器来处理的。<br><code>release()</code> 可以释放播放器占用的资源，一旦确定不再使用播放器时应当尽早调用它释放资源。<br><code>reset()</code> 可以使播放器从 Error 状态中恢复过来，重新会到 Idle 状态。<br><code>isPlaying()</code> 判断当前的 MediaPlayer 是否正在播放音频<br><code>getDuration()</code> 获取载入的音频文件的时长</p><h2 id="使用-SOP"><a href="#使用-SOP" class="headerlink" title="使用 SOP"></a>使用 SOP</h2><h3 id="1-实例化"><a href="#1-实例化" class="headerlink" title="1. 实例化"></a>1. 实例化</h3><p>可以使用直接new的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaPlayer mp = new MediaPlayer();</span><br></pre></td></tr></table></figure></p><p>也可以使用create的方式，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaPlayer mp = MediaPlayer.create(this, R.raw.test_media_file_rsid);//这时就不用调用setDataSource了</span><br></pre></td></tr></table></figure></p><h3 id="2-设置音频文件路径-setDataSource"><a href="#2-设置音频文件路径-setDataSource" class="headerlink" title="2. 设置音频文件路径 setDataSource"></a>2. 设置音频文件路径 setDataSource</h3><p>MediaPlayer要播放的文件主要包括3个来源：<br>a. 用户在应用中事先自带的resource资源<br>     例如：MediaPlayer.create(this, R.raw.test_media_file_rsid);<br>b. 存储在SD卡或其他文件路径下的媒体文件<br>     例如：mp.setDataSource(“/sdcard/test.mp3”);<br>c. 网络上的媒体文件<br>   例如：mp.setDataSource(“<a href="http://www.xxx.com/test.mp3&quot;)" target="_blank" rel="noopener">http://www.xxx.com/test.mp3&quot;)</a>;</p><p>MediaPlayer的setDataSource一共四个方法：<br>       setDataSource (String path)<br>       setDataSource (FileDescriptor fd)<br>       setDataSource (Context context, Uri uri)<br>       setDataSource (FileDescriptor fd, long offset, long length)</p><h3 id="3-进入准备状态-prepare"><a href="#3-进入准备状态-prepare" class="headerlink" title="3. 进入准备状态 prepare()"></a>3. 进入准备状态 prepare()</h3><h3 id="4-操作"><a href="#4-操作" class="headerlink" title="4. 操作"></a>4. 操作</h3><p>start() / pause() / reset()</p><p>4）设置播放器的监听器：</p><p>   MediaPlayer提供了一些设置不同监听器的方法来更好地对播放器的工作状态进行监听，以期及时处理各种情况，</p><p>如： setOnCompletionListener(MediaPlayer.OnCompletionListener listener)、</p><pre><code>setOnErrorListener(MediaPlayer.OnErrorListener listener)等,设置播放器时需要考虑到播放器可能出现的情况设置好监听和处理逻辑，以保持播放器的健壮性。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用控制方法&quot;&gt;&lt;a href=&quot;#常用控制方法&quot; class=&quot;headerlink&quot; title=&quot;常用控制方法&quot;&gt;&lt;/a&gt;常用控制方法&lt;/h2&gt;&lt;p&gt;Android 通过控制播放器的状态的方式来控制媒体文件的播放，其中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setDa
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_多线程编程</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_多线程编程/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:34:40.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过实现-Runnable-接口的实例来创建线程"><a href="#通过实现-Runnable-接口的实例来创建线程" class="headerlink" title="通过实现 Runnable 接口的实例来创建线程"></a>通过实现 Runnable 接口的实例来创建线程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class RunnableDemo implements Runnable &#123;</span><br><span class="line">   private Thread t;</span><br><span class="line">   private String threadName;</span><br><span class="line">   </span><br><span class="line">   RunnableDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(&quot;Creating &quot; +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public void run() &#123;</span><br><span class="line">      System.out.println(&quot;Running &quot; +  threadName );</span><br><span class="line">      try &#123;</span><br><span class="line">         for(int i = 4; i &gt; 0; i--) &#123;</span><br><span class="line">            System.out.println(&quot;Thread: &quot; + threadName + &quot;, &quot; + i);</span><br><span class="line">            // 让线程睡眠一会</span><br><span class="line">            Thread.sleep(50);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;catch (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(&quot;Thread &quot; +  threadName + &quot; interrupted.&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(&quot;Thread &quot; +  threadName + &quot; exiting.&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public void start () &#123;</span><br><span class="line">      System.out.println(&quot;Starting &quot; +  threadName );</span><br><span class="line">      if (t == null) &#123;</span><br><span class="line">         t = new Thread (this, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public class TestThread &#123;</span><br><span class="line"> </span><br><span class="line">   public static void main(String args[]) &#123;</span><br><span class="line">      RunnableDemo R1 = new RunnableDemo( &quot;Thread-1&quot;);</span><br><span class="line">      R1.start();</span><br><span class="line">      </span><br><span class="line">      RunnableDemo R2 = new RunnableDemo( &quot;Thread-2&quot;);</span><br><span class="line">      R2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-Runnable-接口的匿名类来创建线程"><a href="#通过-Runnable-接口的匿名类来创建线程" class="headerlink" title="通过 Runnable 接口的匿名类来创建线程"></a>通过 Runnable 接口的匿名类来创建线程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">    // 处理具体的逻辑 (耗时)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h2 id="Thread-基本概念"><a href="#Thread-基本概念" class="headerlink" title="Thread 基本概念"></a>Thread 基本概念</h2><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。<br>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。<br>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>使用继承导致耦合性高 , 不如使用接口</p><h2 id="Thread-实例"><a href="#Thread-实例" class="headerlink" title="Thread 实例"></a>Thread 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class ThreadDemo extends Thread &#123;</span><br><span class="line">   private Thread t;</span><br><span class="line">   private String threadName;</span><br><span class="line">   </span><br><span class="line">   ThreadDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(&quot;Creating &quot; +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public void run() &#123; // run() 中处理具体的逻辑</span><br><span class="line">      System.out.println(&quot;Running &quot; +  threadName );</span><br><span class="line">      try &#123;</span><br><span class="line">         for(int i = 4; i &gt; 0; i--) &#123;</span><br><span class="line">            System.out.println(&quot;Thread: &quot; + threadName + &quot;, &quot; + i);</span><br><span class="line">            // 让线程睡眠一会</span><br><span class="line">            Thread.sleep(50);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;catch (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(&quot;Thread &quot; +  threadName + &quot; interrupted.&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(&quot;Thread &quot; +  threadName + &quot; exiting.&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public void start () &#123;</span><br><span class="line">      System.out.println(&quot;Starting &quot; +  threadName );</span><br><span class="line">      if (t == null) &#123;</span><br><span class="line">         t = new Thread (this, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public class TestThread &#123; </span><br><span class="line">   public static void main(String args[]) &#123;</span><br><span class="line">      ThreadDemo T1 = new ThreadDemo( &quot;Thread-1&quot;);</span><br><span class="line">      T1.start();</span><br><span class="line">      </span><br><span class="line">      ThreadDemo T2 = new ThreadDemo( &quot;Thread-2&quot;);</span><br><span class="line">      T2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过实现-Runnable-接口的实例来创建线程&quot;&gt;&lt;a href=&quot;#通过实现-Runnable-接口的实例来创建线程&quot; class=&quot;headerlink&quot; title=&quot;通过实现 Runnable 接口的实例来创建线程&quot;&gt;&lt;/a&gt;通过实现 Runnable 
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_异步消息处理机制</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_异步消息处理机制/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:34:30.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p>Message<br>线程之间传递的载体<br><code>.what</code> <code>.arg1</code> <code>.arg2</code>  字段可以携带整型数据</p></li><li><p>Handler<br>用于发送和处理 Message<br>Handler.sendMessage()<br>Handler.handleMessage()</p></li><li><p>MessageQueue<br>存放所有通过 Handler 发送的消息, 等待被处理<br>每个线程只会有一个 MessageQueue</p></li><li><p>Looper<br>Looper 是每个线程 MessageQueue 的管家.<br>Looper.loop() 后, 会进入循环, 当发现 MessageQueue 中存在消息, 就会取出, 并传递到 Handler.handleMessage 中.<br>每个线程也只会有一个 Looper 对象.</p></li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>主线程创建 Handler 对象, 重写 handle Message() 方法</li><li>子线程中要操作 UI 时, 创建 Message 对象, 并通过 Handler 发送 Message 即可</li><li>Message 会被添加到 MessageQueue </li><li>Looper 会一直尝试从 MessageQueue 中取出 Msg, 最后分发到 handleMessage() 中</li></ol><h2 id="AsyncTask-基本概念"><a href="#AsyncTask-基本概念" class="headerlink" title="AsyncTask 基本概念"></a>AsyncTask 基本概念</h2><p>AsyncTask 为抽象类, 需要继承 并 指定三个泛形参数<br>泛形参数:<br>1.<code>Params</code> 在执行 AsyncTask 传入的参数, 用于后台任务中使用<br>2.<code>Progress</code> 后台任务执行时, 如果需要在界面上显示当前进度, 这里的泛形为进度单位<br>3.<code>Result</code> 任务执行完毕后, 对结果进行返回, 这里的泛形为返回类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">// Void 不需要参数给后台</span><br><span class="line">// Integer 用整型作进度单位</span><br><span class="line">// Boolean 作为返回值</span><br></pre></td></tr></table></figure></p><p>重写 4 个方法:</p><ol><li><p>onPreExecute()<br>在后台任务执行前开始调用,<br>完成界面初始化</p></li><li><p>doInBackground(Params…)<br>这里处理所有耗时内容, 将会运行在子线程中.<br>所以不可执行任何 UI 操作, 可以调用 publishProgress 方法进行 UI 更新</p></li><li><p>onProgressUpdate(Progress…)<br>当调用了 publishProgress 后, 调用本方法, 其中携带的参数就是后台任务中传递过来的<br>可以在此进行 UI 更新</p></li><li><p>onPostExecute(Result)<br>后台执行完毕 通过 return 返回时, 此方法被调用.<br><code>Result</code> 作为参数传递到此方法, 一般用其进行 UI 操作.</p></li></ol><h2 id="AsyncTask-实例"><a href="#AsyncTask-实例" class="headerlink" title="AsyncTask 实例"></a>AsyncTask 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    protected void onPreExecute() &#123;</span><br><span class="line">    progressDialog.show(); //显示进度对话框</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected Boolean doInBackground(Void... params) &#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">        int downloadPercent = doDownload(); //虚构的方法 //有嗯与计算当前下载进度并返回</span><br><span class="line">        publishProgress(downloadPercent);</span><br><span class="line">            if (downloadPercent &gt;= 100) &#123;</span><br><span class="line">            break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected void onProgressUpdate(Integer... values) &#123;</span><br><span class="line">    //更新下载进度</span><br><span class="line">        progressDialog.setMessage(&quot;Downloaded&quot; + values[0] + &quot;%&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected void onPostExecute(Boolean result) &#123;</span><br><span class="line">    progressDialog.dismiss(); // 关闭进度对话框</span><br><span class="line">        // 在这里提示下载结果</span><br><span class="line">        if (result) &#123;</span><br><span class="line">        Toast.makeText(context, &quot;Download succeeded&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        Toast.makeText(context, &quot;Download Failed&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Handler-实例"><a href="#Handler-实例" class="headerlink" title="Handler 实例"></a>Handler 实例</h2><h3 id="子线程"><a href="#子线程" class="headerlink" title="子线程"></a>子线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    public static final int UPDATE_TEXT = 1;</span><br><span class="line"></span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        switch (v.getId()) &#123;</span><br><span class="line">            case R.id.change_text:</span><br><span class="line">                new Thread(new Runnable() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">//                        不能直接在子线程中操作 UI</span><br><span class="line">//                        text.setText(&quot;Nice to meet you&quot;);</span><br><span class="line">                        Message message = new Message();</span><br><span class="line">                        message.what = UPDATE_TEXT;</span><br><span class="line">                        handler.sendMessage(message);</span><br><span class="line">                        Log.d(TAG, &quot;onClick run() handler sendMessage&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private Handler handler = new Handler() &#123; //创建 Handler 对象</span><br><span class="line"></span><br><span class="line">    // 重写父类 handleMessage 方法</span><br><span class="line">    // 接收到子线程发送的 sendMessage 后调用 handleMessage 进行处理</span><br><span class="line">    public void handleMessage(Message msg) &#123;</span><br><span class="line">        Log.d(TAG, &quot;handlerMessage: Got Message&quot;);</span><br><span class="line">        switch(msg.what) &#123;</span><br><span class="line">            case UPDATE_TEXT:</span><br><span class="line">                // 进行 UI 操作</span><br><span class="line">                text.setText(&quot;Nice To Meet You!&quot;);</span><br><span class="line">                Log.d(TAG, &quot;handlerMessage: Got Message: UI Update&quot;);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Message&lt;br&gt;线程之间传递的载体&lt;br&gt;&lt;code&gt;.what&lt;/code&gt; &lt;code&gt;.arg
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_控件_AlertDialog</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_%E6%8E%A7%E4%BB%B6_AlertDialog/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_控件_AlertDialog/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:37:49.787Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</span><br><span class="line">builder.setTitle(<span class="string">"Warning"</span>);</span><br><span class="line">builder.setMessage(<span class="string">"You are forced to be offline. Please try to login again."</span>);</span><br><span class="line">builder.setCancelable(<span class="keyword">false</span>); <span class="comment">// 设置为不可取消</span></span><br><span class="line">builder.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        ActivityCollector.finishAll(); <span class="comment">// 销毁所有的活动</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(context , LoginActivity.class);</span><br><span class="line">        context.startActivity(intent); <span class="comment">// 重新启动 LoginActivity</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">builder.show();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_控件_Fragment</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_%E6%8E%A7%E4%BB%B6_Fragment/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_控件_Fragment/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:36:06.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fragment-实例"><a href="#Fragment-实例" class="headerlink" title="Fragment 实例"></a>Fragment 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    ...</span><br><span class="line">    // 1. 创建待添加 fragment 实例</span><br><span class="line">    replaceFragment(fragment1);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void replaceFragment(Fragment fragment) &#123;</span><br><span class="line">    // 2. 获取 FragmentManager</span><br><span class="line">    FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">    // 3. 开启一个 事务 transaction</span><br><span class="line">    FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">    // 4. 向容器内添加或者替换 fragment</span><br><span class="line">    // 参数1 容器id     参数2 待添加fragment实例</span><br><span class="line">    transaction.replace(R.id.right_layout, fragment);</span><br><span class="line"></span><br><span class="line">    // 添加到返回栈</span><br><span class="line">    // 参数为名字,用来描述返回栈的状态</span><br><span class="line">    transaction.addToBackStack(null);</span><br><span class="line"></span><br><span class="line">    // 5. 提交 事务 transaction</span><br><span class="line">    transaction.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-onClick-中使用"><a href="#在-onClick-中使用" class="headerlink" title="在 onClick 中使用"></a>在 onClick 中使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RightFragment fragment1 = new RightFragment();</span><br><span class="line">   AnotherRightFragment fragment2 = new AnotherRightFragment();</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onClick(View v) &#123;</span><br><span class="line">       switch (v.getId())&#123;</span><br><span class="line">           case R.id.button1:</span><br><span class="line">               replaceFragment(fragment1);</span><br><span class="line">               break;</span><br><span class="line">           case R.id.button2:</span><br><span class="line">               replaceFragment(fragment2);</span><br><span class="line">           default:</span><br><span class="line">               break;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Fragment-和-Activity-通信"><a href="#Fragment-和-Activity-通信" class="headerlink" title="Fragment 和 Activity 通信"></a>Fragment 和 Activity 通信</h2><h3 id="在-Activity-中调用-fragment-的方法-findFragmentById"><a href="#在-Activity-中调用-fragment-的方法-findFragmentById" class="headerlink" title="在 Activity 中调用 fragment 的方法 findFragmentById"></a>在 Activity 中调用 fragment 的方法 findFragmentById</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RightFragment rightFragment = (RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);</span><br></pre></td></tr></table></figure><h3 id="在-Fragment-中调用-Activity-的方法"><a href="#在-Fragment-中调用-Activity-的方法" class="headerlink" title="在  Fragment 中调用 Activity 的方法"></a>在  Fragment 中调用 Activity 的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivity activity = (MainActivity)getActivity();</span><br></pre></td></tr></table></figure><h2 id="Fragment-的生命周期"><a href="#Fragment-的生命周期" class="headerlink" title="Fragment 的生命周期"></a>Fragment 的生命周期</h2><p><img src="https://ws1.sinaimg.cn/large/ba061518ly1ftf9x1v0grj208t0nj0ui.jpg" alt="Fragment 生命周期"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Fragment-实例&quot;&gt;&lt;a href=&quot;#Fragment-实例&quot; class=&quot;headerlink&quot; title=&quot;Fragment 实例&quot;&gt;&lt;/a&gt;Fragment 实例&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_全局获取Context方法</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_%E5%85%A8%E5%B1%80%E8%8E%B7%E5%8F%96Context%E6%96%B9%E6%B3%95/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_全局获取Context方法/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:34:58.113Z</updated>
    
    <content type="html"><![CDATA[<p>利用 Application 类.<br>当应用程序启动时 , 系统会自动对 Applicaiton 类进行初始化.<br>我们可以定制自己的一个 Application 类, 以便于管理程序内的 <strong>全局状态信息</strong>.</p><h3 id="自定义-WholeApplication-类"><a href="#自定义-WholeApplication-类" class="headerlink" title="自定义 WholeApplication 类"></a>自定义 WholeApplication 类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class WholeApplication extends Application &#123;</span><br><span class="line">private static Context context;</span><br><span class="line">    </span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">    context = getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static Context getContext() &#123;</span><br><span class="line">    return context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="告知系统-程序启动时应该初始化-WholeApplication-而不是-Application"><a href="#告知系统-程序启动时应该初始化-WholeApplication-而不是-Application" class="headerlink" title="告知系统,程序启动时应该初始化 WholeApplication 而不是 Application"></a>告知系统,程序启动时应该初始化 WholeApplication 而不是 Application</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"com.iyounix.practice.wholeapplication"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>任何想要用到 context 的地方 , 使用 WholeApplication.getContext() , 比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(WholeApplication.getContext(), &quot;test&quot; , Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>比如为了让 litepal 正常工作 , 需要声明 :<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>并且在 WholeApplication 的 onCreate() 中初始化:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void onCreate() &#123;</span><br><span class="line">context = getApplicationContext();</span><br><span class="line">    LitePalApplication.initialize(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用 Application 类.&lt;br&gt;当应用程序启动时 , 系统会自动对 Applicaiton 类进行初始化.&lt;br&gt;我们可以定制自己的一个 Application 类, 以便于管理程序内的 &lt;strong&gt;全局状态信息&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;自
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_Notification</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_Notification/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_Notification/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:35:38.433Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在 Activity 中创建</li><li>在 BoardCast 中创建</li><li>在 Service 中创建</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>管理 Notification</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager manager = (NotificationManager) Context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br></pre></td></tr></table></figure></li><li><p>构造 Notification 对象<br>通过 <code>NotificationCompat.Builder</code>构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = new NotificationCompat.Builder(context).build();</span><br></pre></td></tr></table></figure></li></ol><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = new NotificationCompat.Builder(context)</span><br><span class="line">.setContentTitle(&quot;This is content title&quot;)</span><br><span class="line">    .setContentText(&quot;This is content Text&quot;)</span><br><span class="line">    .setWhen(System.currentTimeMillis()) //被通知的时间</span><br><span class="line">    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.large_icon)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></p><ol start="3"><li>显示通知<br>调用 NotificationManager 的 notifiy() 方法.<br>参数1 id<br>参数2 Notification 对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.notify(1,notificaton)</span><br></pre></td></tr></table></figure></li></ol><h2 id="更多通知技巧1"><a href="#更多通知技巧1" class="headerlink" title="更多通知技巧1"></a>更多通知技巧1</h2><p>setSound() 设置通知音频<br>setVibrate() 设置振动<br>setLights() 设置光效<br>setDefaults(NotificationCompat.DEFAULT_ALL) 根据当前手机的默认参数设置一切</p><h2 id="setSound"><a href="#setSound" class="headerlink" title="setSound()"></a>setSound()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setSound(Uri.fromFile(new File(&quot;/system/media/audio/ringtones/Luna.ogg&quot;)))</span><br></pre></td></tr></table></figure><h2 id="setVibrate"><a href="#setVibrate" class="headerlink" title="setVibrate()"></a>setVibrate()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[0] 手机静止的时长</span><br><span class="line">[1] 手机振动的时长</span><br><span class="line">[2] 手机静止的时长</span><br><span class="line">[3] 手机振动的时长</span><br></pre></td></tr></table></figure><p>比如:<br>振 1s – 静 1s – 振 1s 代码为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setVibrate(new long[] &#123;0, 1000, 1000, 1000&#125;)</span><br></pre></td></tr></table></figure></p><p>并且 AndroidManifest.xml 里面:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h2 id="setLights"><a href="#setLights" class="headerlink" title="setLights"></a>setLights</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setLights(Color.GREEN,1000,1000)</span><br></pre></td></tr></table></figure><h2 id="更多通知技巧2"><a href="#更多通知技巧2" class="headerlink" title="更多通知技巧2"></a>更多通知技巧2</h2><p>setStyle() 构建富文本通知内容<br>setPriority() 设置通知的重要程度</p><h2 id="setStyle"><a href="#setStyle" class="headerlink" title="setStyle"></a>setStyle</h2><p>参数1. NotificationCompat.Style</p><p>默认通知显示内容有限 , 比如 text , 如果过长 只能显示局部.<br>解决方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setStyle(new NotificationCompat.BigTextStyle().bigText(&quot;This is a longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong Text&quot;))</span><br></pre></td></tr></table></figure></p><h2 id="setPriority"><a href="#setPriority" class="headerlink" title="setPriority"></a>setPriority</h2><p>参数1.<br>PRIORITY_MIN 最低;比如用户下拉通知栏<br>PRIORITY_LOW 较低;<br>PRIORITY_DEFAULT 默认;通知栏出现小图标<br>PRIORITY_HIGH 较高; 放大,排名靠前<br>PRIORITY_MAX 最高;立刻看到与响应, 比如微信通知弹窗</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>和 Intent 类似 , 都用于指明’意图’,可以用于启动 Activity/Service/BroadCast.<br>和 Intent 不同 , Intent 立即执行 , PendingIntent 延迟执行.</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="1-静态获取-PendingIntent-实例"><a href="#1-静态获取-PendingIntent-实例" class="headerlink" title="1. 静态获取 PendingIntent 实例"></a>1. 静态获取 PendingIntent 实例</h3><p>getActivity()<br>getBroadcast()<br>getService()<br>参数1 Context<br>参数2 0<br>参数3 Intent对象<br>参数4 PendingIntent 行为: FLAG_ONE_SHOT FLAG_NO_CREATE FLAG_CANCEL_CURRENT FLAG_UPDATE_CURRENT</p><h3 id="2-构造器连缀一个-setContentIntent"><a href="#2-构造器连缀一个-setContentIntent" class="headerlink" title="2. 构造器连缀一个 setContentIntent"></a>2. 构造器连缀一个 setContentIntent</h3><p>NotificationCompat.Builder.setContentIntent()<br>参数 PendingIntent 对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(this, NotificationActivity.class);</span><br><span class="line">PendingIntent pi = PendingIntent.getActivity(this,  0 ,intent, 0);</span><br><span class="line">...</span><br><span class="line">Notification notification = new NotificationCompat.Builder(this)</span><br><span class="line">.setContentIntent(pi)</span><br></pre></td></tr></table></figure></p><h3 id="3-取消系统状态栏上面的通知图标"><a href="#3-取消系统状态栏上面的通知图标" class="headerlink" title="3. 取消系统状态栏上面的通知图标"></a>3. 取消系统状态栏上面的通知图标</h3><p>3.1 NotificationCompat.Builder 连缀 .setAutoCancel(true)<br>3.2 利用 Manager 的 cancel()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">manager.cancel(1);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;在 Activity 中创建&lt;/li&gt;
&lt;li&gt;在 BoardCast 中创建&lt;/li&gt;
&lt;li&gt;在 Service 中创建&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_动态权限</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_动态权限/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:34:48.649Z</updated>
    
    <content type="html"><![CDATA[<p>在程序运行的过程中由用户去授权执行某些可能是危险的的操作.</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li><p>检查权限<br>ContextCompat.checkSelfPermission<br>参数 1 Context<br>参数 2 具体的权限名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.CALL_PHONE)</span><br><span class="line"></span><br><span class="line">判断有无权限:</span><br><span class="line">ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.CALL_PHONE) </span><br><span class="line"> != PackageManager.PERMISSION_GRANTED</span><br></pre></td></tr></table></figure></li><li><p>申请权限<br>ActivityCompat.requestPermissions<br>参数 1 Context<br>参数 2 权限名<br>参数 3 自定义权限码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123; Manifest.permission.CALL_PHONE &#125;, 1)</span><br></pre></td></tr></table></figure></li></ol><p>之后系统会弹出权限申请对话框, 再调用 onRequestPermissionResult .<br>授权结果会封装在 grantResults 参数中</p><ol start="3"><li>回调<br>onRequestPermissionResult<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void onRequestPermissionsResult ( int requestCode, String[] permissions , int[] grantResults) &#123;</span><br><span class="line">    switch (requestCode) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            if(grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                call();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast.makeText(this, &quot;You denied the permission&quot; , Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在程序运行的过程中由用户去授权执行某些可能是危险的的操作.&lt;/p&gt;
&lt;h2 id=&quot;实现步骤&quot;&gt;&lt;a href=&quot;#实现步骤&quot; class=&quot;headerlink&quot; title=&quot;实现步骤&quot;&gt;&lt;/a&gt;实现步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;检查权限&lt;br&gt;ContextC
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>组件_ContentProvider</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/%E7%BB%84%E4%BB%B6_ContentProvider/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/组件_ContentProvider/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:38:39.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>用法两种:</p><ol><li>使用现有的ContentProvider来读取和操作相应程序中的数据</li><li>创建自己的内容提供器给我们的程序的数据提供外部访问接口</li></ol><h2 id="ContentResolver-使用方法"><a href="#ContentResolver-使用方法" class="headerlink" title="ContentResolver 使用方法"></a>ContentResolver 使用方法</h2><p>ContentResolver resolver = Context.getContentResolver();<br>resolver.insert //增<br>resolver.delete //删<br>resolver.update //改<br>resolver.query  //查</p><p>参数为 内容URI :<br><code>content://com.example.app.provider/table1</code><br>不过得先解析为 URI 对象:<br><code>Uri uri = Uri.parse(&quot;content://com.example.app.provider/table1&quot;)</code></p><p>使用 内容URI 查询 table1 的内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cursor cursor = getContentResolver().query(</span><br><span class="line">uri,</span><br><span class="line">    projection,//指定列名</span><br><span class="line">    selection,//Where约束</span><br><span class="line">    selectionArgs,//Where占位符提供具体的值</span><br><span class="line">    sortOrder//指定查询结果的排序方式</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>通过移动游标位置,遍历 Cursor:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (cursor != null)&#123;</span><br><span class="line">while (cursor.moveToNext()) &#123;</span><br><span class="line">    String column1 = cursor.getString(cursor.getColumnIndex(&quot;column1&quot;));</span><br><span class="line">        int column2 = cursor.getInt(cursor.getColumnIndex(&quot;column2&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    cursor.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h2><p>//增<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ContentValues values = new ContentValues();</span><br><span class="line">values.put(&quot;column1&quot;, &quot;text&quot;);</span><br><span class="line">values.put(&quot;column2&quot;, 1);</span><br><span class="line">getContentResolver().insert(uri,values); // 增</span><br></pre></td></tr></table></figure></p><p>//改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ContentValues values = new ContentValues();</span><br><span class="line">values.put(&quot;column1&quot;, &quot;&quot;);</span><br><span class="line">getContentResolver().update(uri. values, &quot;column1 = ? and column2 = ?&quot; , new String[] &#123;&quot;text&quot; , &quot;1&quot;&#125;); //改</span><br></pre></td></tr></table></figure></p><p>//删<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getContentResolver().delete(uri, &quot;column2 = ?&quot;, new String[] &#123;&quot;1&quot;&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;用法两种:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用现有的ContentProvider来读取和操作相应程序中的数据&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>组件_BroadcastReceiver</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/%E7%BB%84%E4%BB%B6_BroadcastReceiver/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/组件_BroadcastReceiver/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:33:23.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h1><h2 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line">    <span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver; <span class="comment">// 内部类</span></span><br><span class="line">    </span><br><span class="line">    onCreate &#123;</span><br><span class="line">        intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        <span class="comment">// 添加 Action</span></span><br><span class="line">        intentFilter.addAction(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>); </span><br><span class="line"></span><br><span class="line">        networkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver(); <span class="comment">// 内部类实例</span></span><br><span class="line">        registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获得系统服务类</span></span><br><span class="line">            ConnectivityManager connectivityManager = (ConnectivityManager)</span><br><span class="line">                    getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 具体的使用场景</span></span><br><span class="line">            <span class="keyword">if</span> (networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isAvailable()) &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">"network is available"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">"network is unavailable"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy"</span>);</span><br><span class="line">        unregisterReceiver(networkChangeReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><p>添加权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>接受开机广播<br>右击 包名 -&gt; New -&gt; Other -&gt; BroadcastReceiver<br>enabled = true 表示是否启用该 BoardcastReceiver<br>exported = ture 表示允许接受本程序以外的 Boardcast</p><h2 id="BootCompleteReceiver-java"><a href="#BootCompleteReceiver-java" class="headerlink" title="BootCompleteReceiver.java"></a>BootCompleteReceiver.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class BootCompleteReceiver extends BroadcastReceiver &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        // TODO: This method is called when the BroadcastReceiver is receiving</span><br><span class="line">        // an Intent broadcast.</span><br><span class="line">//        throw new UnsupportedOperationException(&quot;Not yet implemented&quot;);</span><br><span class="line">        Toast.makeText(context, &quot;Boot Complete&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AndroidManifest-xml-1"><a href="#AndroidManifest-xml-1" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;application</span><br><span class="line">    &lt;receiver</span><br><span class="line">        android:name=&quot;.BootCompleteReceiver&quot;</span><br><span class="line">        android:enabled=&quot;true&quot;</span><br><span class="line">        android:exported=&quot;true&quot;&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">    &lt;/receiver&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义标准广播"><a href="#自定义标准广播" class="headerlink" title="自定义标准广播"></a>自定义标准广播</h1><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>点击 Mainactivity 的 Button ,发送广播<br>然后 App 接收到并弹出 Toast</p><h2 id="Mainactivity-java"><a href="#Mainactivity-java" class="headerlink" title="Mainactivity.java"></a>Mainactivity.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Example 3 MY_BROADCAST</span><br><span class="line">Button button = findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Intent intent = new Intent(&quot;com.iyounix.android.a010broadcasts.MY_BROADCAST&quot;);</span><br><span class="line">        sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="MyBroadcastReceiver-java"><a href="#MyBroadcastReceiver-java" class="headerlink" title="MyBroadcastReceiver.java"></a>MyBroadcastReceiver.java</h2><p>public class MyBroadcastReceiver extends BroadcastReceiver {</p><pre><code>@Overridepublic void onReceive(Context context, Intent intent) {    Toast.makeText(context, &quot;received in Younix BoardcastReceiver&quot;,Toast.LENGTH_SHORT).show();}</code></pre><p>}</p><h2 id="AndroidManifest-xml-2"><a href="#AndroidManifest-xml-2" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=&quot;.MyBroadcastReceiver&quot;</span><br><span class="line">    android:enabled=&quot;true&quot;</span><br><span class="line">    android:exported=&quot;true&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=&quot;com.iyounix.android.a010broadcasts.MY_BROADCAST&quot;/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态注册&quot;&gt;&lt;a href=&quot;#动态注册&quot; class=&quot;headerlink&quot; title=&quot;动态注册&quot;&gt;&lt;/a&gt;动态注册&lt;/h1&gt;&lt;h2 id=&quot;MainActivity-java&quot;&gt;&lt;a href=&quot;#MainActivity-java&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>数据持久化_数据库_LitePal 和 SQLite</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96_%E6%95%B0%E6%8D%AE%E5%BA%93_LitePal%20%E5%92%8C%20SQLite/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/数据持久化_数据库_LitePal 和 SQLite/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:38:29.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LitePal-基本概念"><a href="#LitePal-基本概念" class="headerlink" title="LitePal 基本概念"></a>LitePal 基本概念</h2><p>LitePal 是开源的 Android 数据库框架, 采用了 对象关系映射 ORM 模式 .<br>封装了常用数据库功能</p><blockquote><p>ORM(对象关系映射) 指的是 面向对象语言 和 关系型数据库 之间建立一种映射关系.</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile &apos;org.litepal.android:core:2.0.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:name=&quot;org.litepal.LitePalApplication&quot;</span><br></pre></td></tr></table></figure><h3 id="litepal-xml"><a href="#litepal-xml" class="headerlink" title="litepal.xml"></a>litepal.xml</h3><litepal><br>  <dbname value="BookStore"></dbname><br>  <version value="1"></version><br>  <list><br>    <mapping class="com.example.litepaltest.Book"></mapping><br>  </list><br></litepal><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connector.getDatabase()</span><br></pre></td></tr></table></figure><h2 id="SQLite-简介"><a href="#SQLite-简介" class="headerlink" title="SQLite 简介"></a>SQLite 简介</h2><p>SQLiteOpenHelper 抽象类<br>{<br>  onCreate()<br>  onUpgrade()</p><p>  getReadableDatabase() //以只读的方式打开db<br>  getWritableDatabase() //以可读写的方式打开db,如果db只读,则返回异常</p><p>  SQLiteOpenHelper() //构造方法<br>  // 参数1 Context 参数2 数据库名 参数3 查询数据的时候返回自定义的cursor(null) 参数4 当前数据库的版本号<br>}</p><p>文件保存在 <code>/data/data/&lt;package name&gt;/databases/</code> 目录下</p><h2 id="SQL-基本操作"><a href="#SQL-基本操作" class="headerlink" title="SQL 基本操作"></a>SQL 基本操作</h2><h3 id="建表-Create"><a href="#建表-Create" class="headerlink" title="建表 Create"></a>建表 Create</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table Book (</span><br><span class="line">id integer primary key autoincrement, // primary key 将 id 设置为主键 // autoincrement 自增长</span><br><span class="line">    author text, // 文本类型</span><br><span class="line">    price real, // 浮点型</span><br><span class="line">    pages integer, // 整型</span><br><span class="line">    name text)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class MyDatabaseHelper extends SQLiteOpenHelper &#123;</span><br><span class="line"></span><br><span class="line">    public static final String CREATE_BOOK = &quot;create table Book (&quot;</span><br><span class="line">            +&quot;id integer primary key autoincrement,&quot;</span><br><span class="line">            +&quot;author text,&quot;</span><br><span class="line">            +&quot;price real,&quot;</span><br><span class="line">            +&quot;pages integer,&quot;</span><br><span class="line">            +&quot;name text)&quot;;</span><br><span class="line"></span><br><span class="line">    private Context mContext;</span><br><span class="line"></span><br><span class="line">    public MyDatabaseHelper(Context context, String name,</span><br><span class="line">                            SQLiteDatabase.CursorFactory factory,</span><br><span class="line">                            int version) &#123;</span><br><span class="line">        super(context, name, factory, version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(SQLiteDatabase db) &#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        Toast.makeText(mContext, &quot;Create succeeded&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化抽象类 MyDatabaseHelper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private MyDatabaseHelper dbHelper;</span><br><span class="line">dbHelper = new MyDatabaseHelper(this, &quot;BookStore.db&quot;,</span><br><span class="line">                null, 1);</span><br><span class="line">        Button createDatabase = findViewById(R.id.create_database);</span><br><span class="line">        createDatabase.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                dbHelper.getWritableDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="删表-Drop"><a href="#删表-Drop" class="headerlink" title="删表 Drop"></a>删表 Drop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL(&quot;drop table if exists Book&quot;);</span><br><span class="line">db.execSQL(&quot;drop table if exists Category&quot;);</span><br></pre></td></tr></table></figure><h3 id="升级-Update"><a href="#升级-Update" class="headerlink" title="升级 Update"></a>升级 Update</h3><p>第四个参数, 比之前大.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbHelper = new MyDatabaseHelper(this, &quot;BookStore.db&quot;,</span><br><span class="line">                null, 2);</span><br></pre></td></tr></table></figure></p><h3 id="查表"><a href="#查表" class="headerlink" title="查表"></a>查表</h3><p>.table  //查表<br>.schema //查看建表语句<br>.exit .quit //退出</p><h2 id="数据库操作-CRUD"><a href="#数据库操作-CRUD" class="headerlink" title="数据库操作 CRUD"></a>数据库操作 CRUD</h2><h3 id="添加数据-insert"><a href="#添加数据-insert" class="headerlink" title="添加数据 insert()"></a>添加数据 insert()</h3><p>insert()<br>参数1 表名<br>参数2 未指定添加数据的情况下,给可为空的列自动赋值NULL. 不用就填null<br>参数3 ContentValues 对象, 提供了 put()方法的重载, 用于添加数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line"> ContentValues values = new ContentValues();</span><br><span class="line"> // 开始组装第一条数据</span><br><span class="line"> values.put(&quot;name&quot;, &quot;The Da Vinci Code&quot;);</span><br><span class="line"> values.put(&quot;author&quot;, &quot;Dan Brown&quot;);</span><br><span class="line"> values.put(&quot;pages&quot;, 454);</span><br><span class="line"> values.put(&quot;price&quot;, 16.94);</span><br><span class="line"> // 插入第一条数据</span><br><span class="line"> db.insert(&quot;Book&quot;, null, values);</span><br><span class="line"> values.clear();</span><br></pre></td></tr></table></figure></p><h3 id="修改数据-update"><a href="#修改数据-update" class="headerlink" title="修改数据 update()"></a>修改数据 update()</h3><p>update()<br>参数1 表名<br>参数2 ContentValues 对象, 提供了 put()方法的重载, 用于添加数据<br>参数3 4 约束更新某一行或几行 , 默认是更新全部 ; 参数3 对应 where 语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">ContentValues values = new ContentValues();</span><br><span class="line">values.put(&quot;price&quot;, 10.99);</span><br><span class="line">db.update(&quot;Book&quot;, values,</span><br><span class="line">        &quot;name = ?&quot;, new String[] &#123;&quot;The Da Vinci Code&quot;&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="删除数据-deleted"><a href="#删除数据-deleted" class="headerlink" title="删除数据 deleted()"></a>删除数据 deleted()</h3><p>delete()<br>参数 1 表名<br>参数 2 3 whereClause 查询语句 , 比如 pages &gt; ? , new Sting[] {“500”}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">db.delete(&quot;Book&quot;, &quot;pages &gt; ?&quot;,</span><br><span class="line">        new String[] &#123;&quot;500&quot;&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="查询数据-query"><a href="#查询数据-query" class="headerlink" title="查询数据 query()"></a>查询数据 query()</h3><p>query()<br>参数 1 table 表名 , from table_name<br>参数 2 columns 查询哪几列 , select column1,column2<br>参数 3 selection 4 selectionArgs 约束条件  where column = value<br>参数 5 groupBy 的列 , group by column<br>参数 6 having , group by 的约束 , having column = value<br>参数 7 orderBy , 指定查询的排列方式 , order by column1 column2<br>返回 Cursor 对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">Cursor cursor = db.query(&quot;Book&quot;, null,null,null,null,null,null);</span><br><span class="line">if(cursor.moveToFirst())&#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        //遍历 Cursor 对象, 取出数据并打印</span><br><span class="line">        String name = cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</span><br><span class="line">        String author = cursor.getString(cursor.getColumnIndex(&quot;author&quot;));</span><br><span class="line">        int pages = cursor.getInt(cursor.getColumnIndex(&quot;pages&quot;));</span><br><span class="line">        double price = cursor.getDouble(cursor.getColumnIndex(&quot;price&quot;));</span><br><span class="line">        Log.d(TAG,&quot;book name is &quot; + name);</span><br><span class="line">        Log.d(TAG,&quot;book author is &quot; + author);</span><br><span class="line">        Log.d(TAG,&quot;book pages is &quot; + pages);</span><br><span class="line">        Log.d(TAG,&quot;book price is &quot; + price);</span><br><span class="line">    &#125; while(cursor.moveToNext());</span><br><span class="line">&#125;</span><br><span class="line">cursor.close();</span><br></pre></td></tr></table></figure></p><h3 id="直接使用-SQL-操作数据"><a href="#直接使用-SQL-操作数据" class="headerlink" title="直接使用 SQL 操作数据"></a>直接使用 SQL 操作数据</h3><p>execSQL 和 rawQuery</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 增</span><br><span class="line">db.execSQL(&quot;insert into Book (name, author, pages, price) values(?, ?, ?, ?)&quot;, </span><br><span class="line">new String[] &#123;&quot;The Da Vinci Code&quot;, &quot;Dan Brown&quot;, &quot;454&quot;, &quot;16.96&quot;&#125;);</span><br><span class="line"># 删</span><br><span class="line">db.execSQL(&quot;delete from Book where pages &gt; ?&quot;, new String[] &#123;&quot;500&quot;&#125;);</span><br><span class="line"># 改</span><br><span class="line">db.execSQL(&quot;update Book set price = ? where name = ?&quot;, new String[] &#123;&quot;10.99&quot;, &quot;The Da Vinci Code&quot;&#125;);</span><br><span class="line"># 查</span><br><span class="line">db.rawQuery(&quot;select * from Book&quot; , null);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LitePal-基本概念&quot;&gt;&lt;a href=&quot;#LitePal-基本概念&quot; class=&quot;headerlink&quot; title=&quot;LitePal 基本概念&quot;&gt;&lt;/a&gt;LitePal 基本概念&lt;/h2&gt;&lt;p&gt;LitePal 是开源的 Android 数据库框架, 采用
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>数据持久化_文件存储</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96_%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/数据持久化_文件存储/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:33:42.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写"><a href="#写" class="headerlink" title="写"></a>写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件名 为 data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputText</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String inputText)</span> </span>&#123;</span><br><span class="line">    FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        out = openFileOutput(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">        writer.write(inputText);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读"><a href="#读" class="headerlink" title="读"></a>读</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// openFileInput 获取 FileInputStream 对象</span></span><br><span class="line">        in = openFileInput(<span class="string">"data"</span>);</span><br><span class="line">        <span class="comment">// 构建 BufferedReader 对象</span></span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">        String line = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 一行行的读, 读到的内容存在 StringBuilder 中</span></span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            content.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写&quot;&gt;&lt;a href=&quot;#写&quot; class=&quot;headerlink&quot; title=&quot;写&quot;&gt;&lt;/a&gt;写&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>数据持久化_SharedPreferences</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96_SharedPreferences/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/数据持久化_SharedPreferences/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:34:05.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通过键值对的方式进行存储. 保存为 xml 文件<br>value - key</p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ol><li>获取 SharedPreferences 对象<br> SharedPreferences.Editor editor = getSharedPreferences(“data”, MODE_PRIVATE).edit();</li><li>editor.putString(“name”, “Tom”);</li><li>editor.apply();<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 通过 getSharedPreferences() 方法指定 SharedPreferences 文件名为 data</span><br><span class="line">SharedPreferences.Editor editor = getSharedPreferences(&quot;data&quot;, MODE_PRIVATE).edit();</span><br><span class="line">editor.putString(&quot;name&quot;, &quot;Tom&quot;);</span><br><span class="line">editor.putInt(&quot;age&quot;, 28);</span><br><span class="line">editor.putBoolean(&quot;married&quot;,false);</span><br><span class="line">editor.apply();</span><br></pre></td></tr></table></figure></li></ol><h3 id="获取-SharedPreferences-对象的三种方法"><a href="#获取-SharedPreferences-对象的三种方法" class="headerlink" title="获取 SharedPreferences 对象的三种方法"></a>获取 SharedPreferences 对象的三种方法</h3><ol><li>Context 类的 getSharedPreferences():  getSharedPreferences(“data”, MODE_PRIVATE);</li><li>Activity 类的 getPreferences():  getPreferences(MODE_PRIVATE);</li><li>PreferenceManager 类的 getDefaultSharedPreferences(): PreferenceManager.getDefaultSharedPreferences(Context);</li></ol><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences pref = getSharedPreferences(&quot;data&quot;, MODE_PRIVATE);</span><br><span class="line">//SharedPreferences pref2 = getPreferences(MODE_PRIVATE);</span><br><span class="line">//SharedPreferences pref3 = new PreferenceManager.getDefaultSharedPreferences(Context);</span><br><span class="line">String name = pref.getString(&quot;name&quot;, &quot;NOBODY&quot;);</span><br><span class="line">int age = pref.getInt(&quot;age&quot;,0);</span><br><span class="line">boolean married = pref.getBoolean(&quot;married&quot;, false);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;通过键值对的方式进行存储. 保存为 xml 文件&lt;br&gt;value - key&lt;/p&gt;
&lt;h2 id=&quot;存储&quot;&gt;&lt;a href=&quot;#存储&quot; 
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SOP_Intent传输对象的方法</title>
    <link href="http://iyounix.com/2018/08/11/Android_App/SOP_Intent%E4%BC%A0%E8%BE%93%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://iyounix.com/2018/08/11/Android_App/SOP_Intent传输对象的方法/</id>
    <published>2018-08-11T03:12:05.000Z</published>
    <updated>2018-11-08T03:33:02.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正常的-Intent-传值的方法"><a href="#正常的-Intent-传值的方法" class="headerlink" title="正常的 Intent 传值的方法"></a>正常的 Intent 传值的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(FirstActivity.this, SecondActivity.class);</span><br><span class="line">intent.putExtra(&quot;string_data&quot;,&quot;hello&quot;);</span><br><span class="line">intent.putExtra(&quot;int_data&quot;,100);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>在 SecondActivity 众通过 getIntent 获取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getIntent().getStringExtra(&quot;string_data&quot;);</span><br><span class="line">getIntent().getIntExtra(&quot;int_data&quot;,0);</span><br></pre></td></tr></table></figure></p><h2 id="传输对象的方法"><a href="#传输对象的方法" class="headerlink" title="传输对象的方法"></a>传输对象的方法</h2><h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>比如有这样一个 class person<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements Serializable &#123;</span><br><span class="line">private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public String getName() &#123; return name; &#125;</span><br><span class="line">    public void setName() &#123; this.name = name; &#125;</span><br><span class="line">    public int getAge() &#123; return age; &#125;</span><br><span class="line">    public void setAge() &#123; this.age = age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Serializable 用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person person = new Person();</span><br><span class="line">... //初始化赋值</span><br><span class="line">Intent intent = new Intent(FirstActivity.this, SecondActivity.class);</span><br><span class="line">intent.putExtra(&quot;person_data&quot;, person);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>在 SecondActivity 众通过 getIntent 获取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = (Person) getIntent().getSerializableExtra(&quot;person_data&quot;);</span><br></pre></td></tr></table></figure></p><h3 id="Parcelable"><a href="#Parcelable" class="headerlink" title="Parcelable"></a>Parcelable</h3><p>需要修改 class Person:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 首先实现 Parcelable 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.1 重写 describeContents 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="comment">//2.2 重写 writeToParcel 方法, 将 Person 中的字段一一写出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    dest.writeString(name); <span class="comment">// 写出name</span></span><br><span class="line">        dest.writeInt(age);<span class="comment">// 写出age</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//3. 提供 CREATOR 常量</span></span><br><span class="line">    <span class="comment">// 创建 Parcelable.Creator 接口的一个实现, 并将泛型指定为 Person.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Person&gt;()&#123;</span><br><span class="line">    <span class="comment">//4.1 重写 createFromParcel , 读取刚才写出的 name 和 age 字段</span></span><br><span class="line">        <span class="comment">// 注意! 顺序必须和写出顺序完全相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.name = source.readString(); <span class="comment">//读取 name</span></span><br><span class="line">            person.age = source.readInt();<span class="comment">//读取 age</span></span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.2 重写 newArray</span></span><br><span class="line">        <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><p>Parcelable 用法完全一样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person person = new Person();</span><br><span class="line">... //初始化赋值</span><br><span class="line">Intent intent = new Intent(FirstActivity.this, SecondActivity.class);</span><br><span class="line">intent.putExtra(&quot;person_data&quot;, person);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>在 SecondActivity 众通过 getIntent 获取值 , 有少许差别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = (Person) getIntent().getParcelableExtra(&quot;person_data&quot;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正常的-Intent-传值的方法&quot;&gt;&lt;a href=&quot;#正常的-Intent-传值的方法&quot; class=&quot;headerlink&quot; title=&quot;正常的 Intent 传值的方法&quot;&gt;&lt;/a&gt;正常的 Intent 传值的方法&lt;/h2&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android7.1 RK3399 添加开机播放视频功能</title>
    <link href="http://iyounix.com/2018/05/31/Android_App/%5BAndroid7.1%5D%5BRK3399%5D%20%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E5%8A%9F%E8%83%BD/"/>
    <id>http://iyounix.com/2018/05/31/Android_App/[Android7.1][RK3399] 添加开机播放视频功能/</id>
    <published>2018-05-31T15:33:05.000Z</published>
    <updated>2018-11-08T03:32:03.141Z</updated>
    
    <content type="html"><![CDATA[<p>Platform: RK3399<br>OS: Android 7.1<br>Kernel: v4.4.83</p><p>rk3399上默认已经添加了开机播放视频的功能，只要按照如下改动就可成功播放。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">kris@eco:~/rk3399/device/rockchip/rk3399$ g df</span><br><span class="line">diff --git a/device.mk b/device.mk</span><br><span class="line">index 2a730bc..6645072 100755</span><br><span class="line">--- a/device.mk</span><br><span class="line">+++ b/device.mk</span><br><span class="line">@@ -282,3 +282,8 @@ PRODUCT_COPY_FILES += \</span><br><span class="line"> #Kris,170814.</span><br><span class="line"> PRODUCT_COPY_FILES += \</span><br><span class="line">     device/rockchip/rk3399/kmsg.sh:system/bin/kmsg.sh</span><br><span class="line">+</span><br><span class="line">+#Kris,170904, copy boot video.</span><br><span class="line">+PRODUCT_COPY_FILES += \</span><br><span class="line">+    device/rockchip/rk3399/bootvideo.mp4:system/media/bootanimation.ts</span><br><span class="line">+</span><br><span class="line">diff --git a/rk3399_mid/system.prop b/rk3399_mid/system.prop</span><br><span class="line">index a9d895e..b0e1807 100755</span><br><span class="line">--- a/rk3399_mid/system.prop</span><br><span class="line">+++ b/rk3399_mid/system.prop</span><br><span class="line">@@ -45,3 +45,7 @@ ro.sf.lcd_density=280</span><br><span class="line"></span><br><span class="line"> #Kris,180712,remove lockscreen.</span><br><span class="line"> ro.lockscreen.disable.default=true</span><br><span class="line">+</span><br><span class="line">+#Kris,180724, enable boot video.</span><br><span class="line">+persist.sys.bootvideo.enable=true</span><br><span class="line">+persist.sys.bootvideo.showtime=10  //测试验证最大15秒，见后面分析</span><br></pre></td></tr></table></figure></p><p>代码流程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">status_t BootAnimation::readyToRun() &#123;</span><br><span class="line">   //判断DATA_BOOTVIDEO_FILE或者SYSTEM_BOOTVIDEO_FILE是否存在。</span><br><span class="line">   //static const char DATA_BOOTVIDEO_FILE[] = &quot;/data/local/bootanimation.ts&quot;;</span><br><span class="line">   //static const char SYSTEM_BOOTVIDEO_FILE[] = &quot;/system/media/bootanimation.ts&quot;;</span><br><span class="line">   if (access(SYSTEM_BOOTVIDEO_FILE, R_OK) == 0)&#123;</span><br><span class="line">      mVideoFile = (char*)SYSTEM_BOOTVIDEO_FILE;</span><br><span class="line">   &#125; else if (access(DATA_BOOTVIDEO_FILE, R_OK) == 0)&#123;</span><br><span class="line">      mVideoFile = (char*)DATA_BOOTVIDEO_FILE;</span><br><span class="line">   &#125;</span><br><span class="line">   //persist.sys.bootvideo.enable需要设置成true</span><br><span class="line">   property_get(&quot;persist.sys.bootvideo.enable&quot;,decrypt, &quot;false&quot;);</span><br><span class="line">   char value[PROPERTY_VALUE_MAX];</span><br><span class="line">   property_get(&quot;persist.sys.bootvideo.showtime&quot;, value, &quot;-1&quot;);</span><br><span class="line">   if(mVideoFile != NULL &amp;&amp; !strcmp(decrypt, &quot;true&quot;) &amp;&amp;(atoi(value)!=0)) &#123;</span><br><span class="line">        mVideoAnimation = true;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">        ALOGD(&quot;bootvideo: No boot video animation,EXIT_VIDEO_NAME:%s,bootvideo.showtime:%s\n&quot;,decrypt,value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>threadLoop():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool BootAnimation::threadLoop()</span><br><span class="line">&#123;</span><br><span class="line">    //mVideoAnimation为true就播放视频</span><br><span class="line">    if (mVideoAnimation)&#123;</span><br><span class="line">        r = video();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>video():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bool BootAnimation::video()</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">    //视频播放的时间</span><br><span class="line">    property_get(&quot;persist.sys.bootvideo.showtime&quot;, value, &quot;-1&quot;);</span><br><span class="line">    int bootvideo_time = atoi(value);//s</span><br><span class="line">    //最大不能超过两分钟</span><br><span class="line">    if(bootvideo_time &gt; 120)</span><br><span class="line">          bootvideo_time = 120;</span><br><span class="line">......</span><br><span class="line">    while(true) &#123;</span><br><span class="line">        const nsecs_t realVideoTime = systemTime()-mStartbootanimaTime;</span><br><span class="line">        //这里检查要不要退出</span><br><span class="line">        //退出的条件是service.bootanim.exit被置1</span><br><span class="line">        checkExit();</span><br><span class="line">        property_set(&quot;sys.bootvideo.closed&quot;, &quot;0&quot;);</span><br><span class="line">        usleep(CHECK_DELAY);</span><br><span class="line">        //播放完或者播放时间超过了就暂停</span><br><span class="line">        if(!mp-&gt;isPlaying()||(((ns2ms(realVideoTime)/1000) &gt; bootvideo_time) &amp;&amp; (bootvideo_time &gt; -1)))&#123;</span><br><span class="line">          mp-&gt;pause();</span><br><span class="line">        &#125;</span><br><span class="line">        if(exitPending())&#123;</span><br><span class="line">           ALOGD(&quot;bootvideo:-----------------stop bootanimationvedio&quot;);</span><br><span class="line">           break;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>小结：<br>实际验证下来，发现视屏的播放并不能按照预设的时间来执行。<br>大概播放15秒之后MediaPlayer使用的RockFFPlayer会被reset。<br>具体最大播放时间可以打印realVideoTime的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">07-24 17:46:11.023   733   733 D PhoneStatusBar: disable: &lt; expand* icons alerts system_info back* home* recent* clock search* quick_settings &gt;</span><br><span class="line">07-24 17:46:11.024   308  1212 D RockFFPlayer: reset()***********</span><br><span class="line">07-24 17:46:11.024   308  1212 D RockFFPlayerBase: dumpStatus(): Started</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Platform: RK3399&lt;br&gt;OS: Android 7.1&lt;br&gt;Kernel: v4.4.83&lt;/p&gt;
&lt;p&gt;rk3399上默认已经添加了开机播放视频的功能，只要按照如下改动就可成功播放。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android7.1 打开设置中的返回键</title>
    <link href="http://iyounix.com/2018/05/01/Android_App/%5BAndroid7.1%5D%20%E6%89%93%E5%BC%80%E8%AE%BE%E7%BD%AE%E4%B8%AD%E7%9A%84%E8%BF%94%E5%9B%9E%E9%94%AE/"/>
    <id>http://iyounix.com/2018/05/01/Android_App/[Android7.1] 打开设置中的返回键/</id>
    <published>2018-05-01T15:33:05.000Z</published>
    <updated>2018-11-08T03:31:27.545Z</updated>
    
    <content type="html"><![CDATA[<p>OS: Android7.1</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>Setting App 在没有物理按键和虚拟返回键的时候无法返回.<br>不过 app 中是自带这个功能的, 不过默认是关闭的.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- a/src/com/android/settings/SettingsActivity.java</span><br><span class="line">+++ b/src/com/android/settings/SettingsActivity.java</span><br><span class="line">@@ -629,7 +629,8 @@ public class SettingsActivity extends SettingsDrawerActivity</span><br><span class="line">                         mInitialTitleResId, mInitialTitle, false);</span><br><span class="line">             &#125; else &#123;</span><br><span class="line">                 // No UP affordance if we are displaying the main Dashboard</span><br><span class="line">-                mDisplayHomeAsUpEnabled = false;</span><br><span class="line">+                mDisplayHomeAsUpEnabled = true;</span><br><span class="line">                 // Show Search affordance</span><br><span class="line">                 mDisplaySearch = true;</span><br><span class="line">                 mInitia               lTitleResId = R.string.dashboard_title;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OS: Android7.1&lt;/p&gt;
&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;Setting App 在没有物理按键和虚拟返回键的时候无法返回.&lt;br&gt;不过 
      
    
    </summary>
    
    
      <category term="RockChip" scheme="http://iyounix.com/tags/RockChip/"/>
    
      <category term="Android" scheme="http://iyounix.com/tags/Android/"/>
    
  </entry>
  
</feed>
